{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 269,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Скачаем необходимые библиотеки\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "from itertools import combinations\n",
    "from scipy.stats import ttest_ind\n",
    "import numpy as np\n",
    "\n",
    "pd.set_option('display.max_rows', 50)  # показывать больше строк\n",
    "pd.set_option('display.max_columns', 50)  # показывать больше колонок\n",
    "\n",
    "avia = pd.read_csv('AAQ winter 2017_4.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 270,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>flight_id</th>\n",
       "      <th>airport_departure</th>\n",
       "      <th>airport_arrival</th>\n",
       "      <th>city</th>\n",
       "      <th>plane_model</th>\n",
       "      <th>time_departure</th>\n",
       "      <th>time_arrival</th>\n",
       "      <th>tickets_cost</th>\n",
       "      <th>total_ticket_sale</th>\n",
       "      <th>flight_duration</th>\n",
       "      <th>fuel_expense</th>\n",
       "      <th>profit_total</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>136119</td>\n",
       "      <td>AAQ</td>\n",
       "      <td>SVO</td>\n",
       "      <td>Moscow</td>\n",
       "      <td>Boeing 737-300</td>\n",
       "      <td>2017-01-03T10:05:00Z</td>\n",
       "      <td>2017-01-03T11:45:00Z</td>\n",
       "      <td>12200.0</td>\n",
       "      <td>1183400.0</td>\n",
       "      <td>1.666667</td>\n",
       "      <td>165400.0</td>\n",
       "      <td>1018000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>136120</td>\n",
       "      <td>AAQ</td>\n",
       "      <td>SVO</td>\n",
       "      <td>Moscow</td>\n",
       "      <td>Boeing 737-300</td>\n",
       "      <td>2017-02-24T10:05:00Z</td>\n",
       "      <td>2017-02-24T11:45:00Z</td>\n",
       "      <td>12200.0</td>\n",
       "      <td>1122400.0</td>\n",
       "      <td>1.666667</td>\n",
       "      <td>165400.0</td>\n",
       "      <td>957000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>136122</td>\n",
       "      <td>AAQ</td>\n",
       "      <td>SVO</td>\n",
       "      <td>Moscow</td>\n",
       "      <td>Boeing 737-300</td>\n",
       "      <td>2017-01-08T10:05:00Z</td>\n",
       "      <td>2017-01-08T11:45:00Z</td>\n",
       "      <td>12200.0</td>\n",
       "      <td>1024800.0</td>\n",
       "      <td>1.666667</td>\n",
       "      <td>165400.0</td>\n",
       "      <td>859400.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>136130</td>\n",
       "      <td>AAQ</td>\n",
       "      <td>SVO</td>\n",
       "      <td>Moscow</td>\n",
       "      <td>Boeing 737-300</td>\n",
       "      <td>2017-02-13T10:05:00Z</td>\n",
       "      <td>2017-02-13T11:45:00Z</td>\n",
       "      <td>12200.0</td>\n",
       "      <td>1110200.0</td>\n",
       "      <td>1.666667</td>\n",
       "      <td>165400.0</td>\n",
       "      <td>944800.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>136131</td>\n",
       "      <td>AAQ</td>\n",
       "      <td>SVO</td>\n",
       "      <td>Moscow</td>\n",
       "      <td>Boeing 737-300</td>\n",
       "      <td>2017-01-28T10:05:00Z</td>\n",
       "      <td>2017-01-28T11:45:00Z</td>\n",
       "      <td>12200.0</td>\n",
       "      <td>1293200.0</td>\n",
       "      <td>1.666667</td>\n",
       "      <td>165400.0</td>\n",
       "      <td>1127800.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>136132</td>\n",
       "      <td>AAQ</td>\n",
       "      <td>SVO</td>\n",
       "      <td>Moscow</td>\n",
       "      <td>Boeing 737-300</td>\n",
       "      <td>2017-02-15T10:05:00Z</td>\n",
       "      <td>2017-02-15T11:45:00Z</td>\n",
       "      <td>12200.0</td>\n",
       "      <td>1207800.0</td>\n",
       "      <td>1.666667</td>\n",
       "      <td>165400.0</td>\n",
       "      <td>1042400.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>136135</td>\n",
       "      <td>AAQ</td>\n",
       "      <td>SVO</td>\n",
       "      <td>Moscow</td>\n",
       "      <td>Boeing 737-300</td>\n",
       "      <td>2017-02-01T10:05:00Z</td>\n",
       "      <td>2017-02-01T11:45:00Z</td>\n",
       "      <td>12200.0</td>\n",
       "      <td>1195600.0</td>\n",
       "      <td>1.666667</td>\n",
       "      <td>165400.0</td>\n",
       "      <td>1030200.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>136146</td>\n",
       "      <td>AAQ</td>\n",
       "      <td>SVO</td>\n",
       "      <td>Moscow</td>\n",
       "      <td>Boeing 737-300</td>\n",
       "      <td>2017-02-09T10:05:00Z</td>\n",
       "      <td>2017-02-09T11:45:00Z</td>\n",
       "      <td>12200.0</td>\n",
       "      <td>1134600.0</td>\n",
       "      <td>1.666667</td>\n",
       "      <td>165400.0</td>\n",
       "      <td>969200.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>136159</td>\n",
       "      <td>AAQ</td>\n",
       "      <td>SVO</td>\n",
       "      <td>Moscow</td>\n",
       "      <td>Boeing 737-300</td>\n",
       "      <td>2017-01-04T10:05:00Z</td>\n",
       "      <td>2017-01-04T11:45:00Z</td>\n",
       "      <td>12200.0</td>\n",
       "      <td>1207800.0</td>\n",
       "      <td>1.666667</td>\n",
       "      <td>165400.0</td>\n",
       "      <td>1042400.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>136164</td>\n",
       "      <td>AAQ</td>\n",
       "      <td>SVO</td>\n",
       "      <td>Moscow</td>\n",
       "      <td>Boeing 737-300</td>\n",
       "      <td>2017-01-07T10:05:00Z</td>\n",
       "      <td>2017-01-07T11:45:00Z</td>\n",
       "      <td>12200.0</td>\n",
       "      <td>1268800.0</td>\n",
       "      <td>1.666667</td>\n",
       "      <td>165400.0</td>\n",
       "      <td>1103400.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   flight_id airport_departure airport_arrival    city     plane_model  \\\n",
       "0     136119               AAQ             SVO  Moscow  Boeing 737-300   \n",
       "1     136120               AAQ             SVO  Moscow  Boeing 737-300   \n",
       "2     136122               AAQ             SVO  Moscow  Boeing 737-300   \n",
       "3     136130               AAQ             SVO  Moscow  Boeing 737-300   \n",
       "4     136131               AAQ             SVO  Moscow  Boeing 737-300   \n",
       "5     136132               AAQ             SVO  Moscow  Boeing 737-300   \n",
       "6     136135               AAQ             SVO  Moscow  Boeing 737-300   \n",
       "7     136146               AAQ             SVO  Moscow  Boeing 737-300   \n",
       "8     136159               AAQ             SVO  Moscow  Boeing 737-300   \n",
       "9     136164               AAQ             SVO  Moscow  Boeing 737-300   \n",
       "\n",
       "         time_departure          time_arrival  tickets_cost  \\\n",
       "0  2017-01-03T10:05:00Z  2017-01-03T11:45:00Z       12200.0   \n",
       "1  2017-02-24T10:05:00Z  2017-02-24T11:45:00Z       12200.0   \n",
       "2  2017-01-08T10:05:00Z  2017-01-08T11:45:00Z       12200.0   \n",
       "3  2017-02-13T10:05:00Z  2017-02-13T11:45:00Z       12200.0   \n",
       "4  2017-01-28T10:05:00Z  2017-01-28T11:45:00Z       12200.0   \n",
       "5  2017-02-15T10:05:00Z  2017-02-15T11:45:00Z       12200.0   \n",
       "6  2017-02-01T10:05:00Z  2017-02-01T11:45:00Z       12200.0   \n",
       "7  2017-02-09T10:05:00Z  2017-02-09T11:45:00Z       12200.0   \n",
       "8  2017-01-04T10:05:00Z  2017-01-04T11:45:00Z       12200.0   \n",
       "9  2017-01-07T10:05:00Z  2017-01-07T11:45:00Z       12200.0   \n",
       "\n",
       "   total_ticket_sale  flight_duration  fuel_expense  profit_total  \n",
       "0          1183400.0         1.666667      165400.0     1018000.0  \n",
       "1          1122400.0         1.666667      165400.0      957000.0  \n",
       "2          1024800.0         1.666667      165400.0      859400.0  \n",
       "3          1110200.0         1.666667      165400.0      944800.0  \n",
       "4          1293200.0         1.666667      165400.0     1127800.0  \n",
       "5          1207800.0         1.666667      165400.0     1042400.0  \n",
       "6          1195600.0         1.666667      165400.0     1030200.0  \n",
       "7          1134600.0         1.666667      165400.0      969200.0  \n",
       "8          1207800.0         1.666667      165400.0     1042400.0  \n",
       "9          1268800.0         1.666667      165400.0     1103400.0  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 363 entries, 0 to 362\n",
      "Data columns (total 12 columns):\n",
      " #   Column             Non-Null Count  Dtype  \n",
      "---  ------             --------------  -----  \n",
      " 0   flight_id          363 non-null    int64  \n",
      " 1   airport_departure  363 non-null    object \n",
      " 2   airport_arrival    363 non-null    object \n",
      " 3   city               363 non-null    object \n",
      " 4   plane_model        363 non-null    object \n",
      " 5   time_departure     363 non-null    object \n",
      " 6   time_arrival       363 non-null    object \n",
      " 7   tickets_cost       354 non-null    float64\n",
      " 8   total_ticket_sale  354 non-null    float64\n",
      " 9   flight_duration    363 non-null    float64\n",
      " 10  fuel_expense       363 non-null    float64\n",
      " 11  profit_total       354 non-null    float64\n",
      "dtypes: float64(5), int64(1), object(6)\n",
      "memory usage: 34.2+ KB\n"
     ]
    }
   ],
   "source": [
    "display(avia.head(10))\n",
    "avia.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 271,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "object     6\n",
       "float64    5\n",
       "int64      1\n",
       "dtype: int64"
      ]
     },
     "execution_count": 271,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "avia.dtypes.value_counts()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Предварительный обзор\n",
    "avia таблица полученная в SQL запросе.\n",
    "Файл содержит  363 строки и 12 столбцов - 6 из которых номинативные, остальные числовые.\n",
    "Столбец airport_departure - это только аэропорт города Анапа - для анализа можно удалить этот столбец.\n",
    "airport_arrival - тут уже разные значения в зависимости от города прилета, позже заменим на категориальную переменную.\n",
    "city - город прилета похоже с airport_arrival, можно оставить только одно . model - тоже оставим, заменив на категориальную переменную.\n",
    "time_departure & time_arrival - переведем в формат времени, может выделим утренние рейсы и по дням недели и тоже оставим.\n",
    "profit_total - это наша целевая переменная!\n",
    "#### Подробнее по признакам\n",
    "     0   flight_id          - номер рейса           \n",
    "     1   airport_departure  - аэропорт города вылета \n",
    "     2   airport_arrival    - аэропорт города прилета \n",
    "     3   city               - город прилета\n",
    "     4   plane_model        - модель самолета \n",
    "     5   time_departure     - дата и время вылета \n",
    "     6   time_arrival       - дата и время прилета \n",
    "     7   ticket_cost        - стоимость билета\n",
    "     8   total_ticket_sale  - общая стоимость билетов на рейсе\n",
    "     9   flight_duration    - продолжительность полета в часах\n",
    "     10   fuel_expense       - расход на топливо в рейсе\n",
    "     11  profit_total       - выручка за рейс, разница между total_ticket_sale и fuel_expense\n",
    "### ЗАДАЧА\n",
    "выяснить, от каких самых малоприбыльных рейсов из Анапы мы можем отказаться в зимнее время."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 272,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Функция для подсчета пустых значений\n",
    "def missing_values_table(avia):\n",
    "        # Количество пропущенных значений\n",
    "        mis_val = avia.isnull().sum()\n",
    "        \n",
    "        # Процент пропущенных значений\n",
    "        mis_val_percent = 100 * avia.isnull().sum() / len(avia)\n",
    "        \n",
    "        #Таблица с результатами\n",
    "        mis_val_table = pd.concat([mis_val, mis_val_percent], axis=1)\n",
    "        \n",
    "        # Переименовываем колонки\n",
    "        mis_val_table_ren_columns = mis_val_table.rename(\n",
    "        columns = {0 : 'Missing Values', 1 : '% of Total Values'})\n",
    "        \n",
    "        # Сортируем значения по проценту\n",
    "        mis_val_table_ren_columns = mis_val_table_ren_columns[\n",
    "            mis_val_table_ren_columns.iloc[:,1] != 0].sort_values(\n",
    "        '% of Total Values', ascending=False).round(1)\n",
    "        \n",
    "        # Печать дополнительной информации\n",
    "        print (\"Your selected dataframe has \" + str(avia.shape[1]) + \" columns.\\n\"      \n",
    "            \"There are \" + str(mis_val_table_ren_columns.shape[0]) +\n",
    "              \" columns that have missing values.\")\n",
    "        \n",
    "       \n",
    "        return mis_val_table_ren_columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 273,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Your selected dataframe has 12 columns.\n",
      "There are 3 columns that have missing values.\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Missing Values</th>\n",
       "      <th>% of Total Values</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>tickets_cost</th>\n",
       "      <td>9</td>\n",
       "      <td>2.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>total_ticket_sale</th>\n",
       "      <td>9</td>\n",
       "      <td>2.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>profit_total</th>\n",
       "      <td>9</td>\n",
       "      <td>2.5</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                   Missing Values  % of Total Values\n",
       "tickets_cost                    9                2.5\n",
       "total_ticket_sale               9                2.5\n",
       "profit_total                    9                2.5"
      ]
     },
     "execution_count": 273,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "missing_values_table(avia)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Как видим три столбца имеют пусты значения, судя по названию, на самом деле у нас только в tickets_cost пропущены значения и поэтому в двух следующих столбцах тоже нет значений. Но в данном анализе, мы не будем выводить новых переменных, а используем уже посчитанные."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 274,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Первоначальный просмотр общих значений.\n",
    "def viewing(column):\n",
    "    print('') \n",
    "    print('Столбец', column)\n",
    "    display(avia[column].value_counts())\n",
    "    print('Количество пропусков: {}'.format(avia[column].isnull().sum()), \n",
    "          'Количество уникальных значений: {}'.format(avia[column].nunique()), sep='\\n')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 275,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['SVO', 'NOZ', 'EGO'], dtype=object)"
      ]
     },
     "execution_count": 275,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "avia['airport_arrival'].unique()\n",
    "## похоже из Анапы перелеты только в 3 аэропорта."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 276,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['Boeing 737-300', 'Sukhoi Superjet-100'], dtype=object)"
      ]
     },
     "execution_count": 276,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "avia['plane_model'].unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 277,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([1.66666667, 5.08333333, 0.83333333])"
      ]
     },
     "execution_count": 277,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "avia['flight_duration'].unique()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Заполним пропуски\n",
    "У нас нет информации по стоимости в город NOZ."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 278,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>flight_id</th>\n",
       "      <th>airport_departure</th>\n",
       "      <th>airport_arrival</th>\n",
       "      <th>city</th>\n",
       "      <th>plane_model</th>\n",
       "      <th>time_departure</th>\n",
       "      <th>time_arrival</th>\n",
       "      <th>tickets_cost</th>\n",
       "      <th>total_ticket_sale</th>\n",
       "      <th>flight_duration</th>\n",
       "      <th>fuel_expense</th>\n",
       "      <th>profit_total</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>177</th>\n",
       "      <td>136511</td>\n",
       "      <td>AAQ</td>\n",
       "      <td>NOZ</td>\n",
       "      <td>Novokuznetsk</td>\n",
       "      <td>Boeing 737-300</td>\n",
       "      <td>2017-02-21T06:10:00Z</td>\n",
       "      <td>2017-02-21T11:15:00Z</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>5.083333</td>\n",
       "      <td>504470.0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>178</th>\n",
       "      <td>136513</td>\n",
       "      <td>AAQ</td>\n",
       "      <td>NOZ</td>\n",
       "      <td>Novokuznetsk</td>\n",
       "      <td>Boeing 737-300</td>\n",
       "      <td>2017-02-28T06:10:00Z</td>\n",
       "      <td>2017-02-28T11:15:00Z</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>5.083333</td>\n",
       "      <td>504470.0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>179</th>\n",
       "      <td>136514</td>\n",
       "      <td>AAQ</td>\n",
       "      <td>NOZ</td>\n",
       "      <td>Novokuznetsk</td>\n",
       "      <td>Boeing 737-300</td>\n",
       "      <td>2017-02-07T06:10:00Z</td>\n",
       "      <td>2017-02-07T11:15:00Z</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>5.083333</td>\n",
       "      <td>504470.0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>180</th>\n",
       "      <td>136523</td>\n",
       "      <td>AAQ</td>\n",
       "      <td>NOZ</td>\n",
       "      <td>Novokuznetsk</td>\n",
       "      <td>Boeing 737-300</td>\n",
       "      <td>2017-01-10T06:10:00Z</td>\n",
       "      <td>2017-01-10T11:15:00Z</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>5.083333</td>\n",
       "      <td>504470.0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>181</th>\n",
       "      <td>136540</td>\n",
       "      <td>AAQ</td>\n",
       "      <td>NOZ</td>\n",
       "      <td>Novokuznetsk</td>\n",
       "      <td>Boeing 737-300</td>\n",
       "      <td>2017-01-17T06:10:00Z</td>\n",
       "      <td>2017-01-17T11:15:00Z</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>5.083333</td>\n",
       "      <td>504470.0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>182</th>\n",
       "      <td>136544</td>\n",
       "      <td>AAQ</td>\n",
       "      <td>NOZ</td>\n",
       "      <td>Novokuznetsk</td>\n",
       "      <td>Boeing 737-300</td>\n",
       "      <td>2017-01-31T06:10:00Z</td>\n",
       "      <td>2017-01-31T11:15:00Z</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>5.083333</td>\n",
       "      <td>504470.0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>183</th>\n",
       "      <td>136546</td>\n",
       "      <td>AAQ</td>\n",
       "      <td>NOZ</td>\n",
       "      <td>Novokuznetsk</td>\n",
       "      <td>Boeing 737-300</td>\n",
       "      <td>2017-01-03T06:10:00Z</td>\n",
       "      <td>2017-01-03T11:15:00Z</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>5.083333</td>\n",
       "      <td>504470.0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>184</th>\n",
       "      <td>136560</td>\n",
       "      <td>AAQ</td>\n",
       "      <td>NOZ</td>\n",
       "      <td>Novokuznetsk</td>\n",
       "      <td>Boeing 737-300</td>\n",
       "      <td>2017-01-24T06:10:00Z</td>\n",
       "      <td>2017-01-24T11:15:00Z</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>5.083333</td>\n",
       "      <td>504470.0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>185</th>\n",
       "      <td>136567</td>\n",
       "      <td>AAQ</td>\n",
       "      <td>NOZ</td>\n",
       "      <td>Novokuznetsk</td>\n",
       "      <td>Boeing 737-300</td>\n",
       "      <td>2017-02-14T06:10:00Z</td>\n",
       "      <td>2017-02-14T11:15:00Z</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>5.083333</td>\n",
       "      <td>504470.0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     flight_id airport_departure airport_arrival          city  \\\n",
       "177     136511               AAQ             NOZ  Novokuznetsk   \n",
       "178     136513               AAQ             NOZ  Novokuznetsk   \n",
       "179     136514               AAQ             NOZ  Novokuznetsk   \n",
       "180     136523               AAQ             NOZ  Novokuznetsk   \n",
       "181     136540               AAQ             NOZ  Novokuznetsk   \n",
       "182     136544               AAQ             NOZ  Novokuznetsk   \n",
       "183     136546               AAQ             NOZ  Novokuznetsk   \n",
       "184     136560               AAQ             NOZ  Novokuznetsk   \n",
       "185     136567               AAQ             NOZ  Novokuznetsk   \n",
       "\n",
       "        plane_model        time_departure          time_arrival  tickets_cost  \\\n",
       "177  Boeing 737-300  2017-02-21T06:10:00Z  2017-02-21T11:15:00Z           NaN   \n",
       "178  Boeing 737-300  2017-02-28T06:10:00Z  2017-02-28T11:15:00Z           NaN   \n",
       "179  Boeing 737-300  2017-02-07T06:10:00Z  2017-02-07T11:15:00Z           NaN   \n",
       "180  Boeing 737-300  2017-01-10T06:10:00Z  2017-01-10T11:15:00Z           NaN   \n",
       "181  Boeing 737-300  2017-01-17T06:10:00Z  2017-01-17T11:15:00Z           NaN   \n",
       "182  Boeing 737-300  2017-01-31T06:10:00Z  2017-01-31T11:15:00Z           NaN   \n",
       "183  Boeing 737-300  2017-01-03T06:10:00Z  2017-01-03T11:15:00Z           NaN   \n",
       "184  Boeing 737-300  2017-01-24T06:10:00Z  2017-01-24T11:15:00Z           NaN   \n",
       "185  Boeing 737-300  2017-02-14T06:10:00Z  2017-02-14T11:15:00Z           NaN   \n",
       "\n",
       "     total_ticket_sale  flight_duration  fuel_expense  profit_total  \n",
       "177                NaN         5.083333      504470.0           NaN  \n",
       "178                NaN         5.083333      504470.0           NaN  \n",
       "179                NaN         5.083333      504470.0           NaN  \n",
       "180                NaN         5.083333      504470.0           NaN  \n",
       "181                NaN         5.083333      504470.0           NaN  \n",
       "182                NaN         5.083333      504470.0           NaN  \n",
       "183                NaN         5.083333      504470.0           NaN  \n",
       "184                NaN         5.083333      504470.0           NaN  \n",
       "185                NaN         5.083333      504470.0           NaN  "
      ]
     },
     "execution_count": 278,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "avia.loc[avia['airport_arrival'] == 'NOZ']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 279,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>flight_id</th>\n",
       "      <th>airport_departure</th>\n",
       "      <th>airport_arrival</th>\n",
       "      <th>city</th>\n",
       "      <th>plane_model</th>\n",
       "      <th>time_departure</th>\n",
       "      <th>time_arrival</th>\n",
       "      <th>tickets_cost</th>\n",
       "      <th>total_ticket_sale</th>\n",
       "      <th>flight_duration</th>\n",
       "      <th>fuel_expense</th>\n",
       "      <th>profit_total</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>136119</td>\n",
       "      <td>AAQ</td>\n",
       "      <td>SVO</td>\n",
       "      <td>Moscow</td>\n",
       "      <td>Boeing 737-300</td>\n",
       "      <td>2017-01-03T10:05:00Z</td>\n",
       "      <td>2017-01-03T11:45:00Z</td>\n",
       "      <td>12200.0</td>\n",
       "      <td>1183400.0</td>\n",
       "      <td>1.666667</td>\n",
       "      <td>165400.0</td>\n",
       "      <td>1018000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>136120</td>\n",
       "      <td>AAQ</td>\n",
       "      <td>SVO</td>\n",
       "      <td>Moscow</td>\n",
       "      <td>Boeing 737-300</td>\n",
       "      <td>2017-02-24T10:05:00Z</td>\n",
       "      <td>2017-02-24T11:45:00Z</td>\n",
       "      <td>12200.0</td>\n",
       "      <td>1122400.0</td>\n",
       "      <td>1.666667</td>\n",
       "      <td>165400.0</td>\n",
       "      <td>957000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>136122</td>\n",
       "      <td>AAQ</td>\n",
       "      <td>SVO</td>\n",
       "      <td>Moscow</td>\n",
       "      <td>Boeing 737-300</td>\n",
       "      <td>2017-01-08T10:05:00Z</td>\n",
       "      <td>2017-01-08T11:45:00Z</td>\n",
       "      <td>12200.0</td>\n",
       "      <td>1024800.0</td>\n",
       "      <td>1.666667</td>\n",
       "      <td>165400.0</td>\n",
       "      <td>859400.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>136130</td>\n",
       "      <td>AAQ</td>\n",
       "      <td>SVO</td>\n",
       "      <td>Moscow</td>\n",
       "      <td>Boeing 737-300</td>\n",
       "      <td>2017-02-13T10:05:00Z</td>\n",
       "      <td>2017-02-13T11:45:00Z</td>\n",
       "      <td>12200.0</td>\n",
       "      <td>1110200.0</td>\n",
       "      <td>1.666667</td>\n",
       "      <td>165400.0</td>\n",
       "      <td>944800.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>136131</td>\n",
       "      <td>AAQ</td>\n",
       "      <td>SVO</td>\n",
       "      <td>Moscow</td>\n",
       "      <td>Boeing 737-300</td>\n",
       "      <td>2017-01-28T10:05:00Z</td>\n",
       "      <td>2017-01-28T11:45:00Z</td>\n",
       "      <td>12200.0</td>\n",
       "      <td>1293200.0</td>\n",
       "      <td>1.666667</td>\n",
       "      <td>165400.0</td>\n",
       "      <td>1127800.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>172</th>\n",
       "      <td>136464</td>\n",
       "      <td>AAQ</td>\n",
       "      <td>SVO</td>\n",
       "      <td>Moscow</td>\n",
       "      <td>Boeing 737-300</td>\n",
       "      <td>2017-01-09T10:05:00Z</td>\n",
       "      <td>2017-01-09T11:45:00Z</td>\n",
       "      <td>36600.0</td>\n",
       "      <td>256200.0</td>\n",
       "      <td>1.666667</td>\n",
       "      <td>165400.0</td>\n",
       "      <td>90800.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>173</th>\n",
       "      <td>136471</td>\n",
       "      <td>AAQ</td>\n",
       "      <td>SVO</td>\n",
       "      <td>Moscow</td>\n",
       "      <td>Boeing 737-300</td>\n",
       "      <td>2017-01-17T10:05:00Z</td>\n",
       "      <td>2017-01-17T11:45:00Z</td>\n",
       "      <td>36600.0</td>\n",
       "      <td>439200.0</td>\n",
       "      <td>1.666667</td>\n",
       "      <td>165400.0</td>\n",
       "      <td>273800.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>174</th>\n",
       "      <td>136479</td>\n",
       "      <td>AAQ</td>\n",
       "      <td>SVO</td>\n",
       "      <td>Moscow</td>\n",
       "      <td>Boeing 737-300</td>\n",
       "      <td>2017-02-21T10:05:00Z</td>\n",
       "      <td>2017-02-21T11:45:00Z</td>\n",
       "      <td>36600.0</td>\n",
       "      <td>366000.0</td>\n",
       "      <td>1.666667</td>\n",
       "      <td>165400.0</td>\n",
       "      <td>200600.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>175</th>\n",
       "      <td>136485</td>\n",
       "      <td>AAQ</td>\n",
       "      <td>SVO</td>\n",
       "      <td>Moscow</td>\n",
       "      <td>Boeing 737-300</td>\n",
       "      <td>2017-01-27T10:05:00Z</td>\n",
       "      <td>2017-01-27T11:45:00Z</td>\n",
       "      <td>36600.0</td>\n",
       "      <td>329400.0</td>\n",
       "      <td>1.666667</td>\n",
       "      <td>165400.0</td>\n",
       "      <td>164000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>176</th>\n",
       "      <td>136486</td>\n",
       "      <td>AAQ</td>\n",
       "      <td>SVO</td>\n",
       "      <td>Moscow</td>\n",
       "      <td>Boeing 737-300</td>\n",
       "      <td>2017-02-02T10:05:00Z</td>\n",
       "      <td>2017-02-02T11:45:00Z</td>\n",
       "      <td>36600.0</td>\n",
       "      <td>292800.0</td>\n",
       "      <td>1.666667</td>\n",
       "      <td>165400.0</td>\n",
       "      <td>127400.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>177 rows × 12 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     flight_id airport_departure airport_arrival    city     plane_model  \\\n",
       "0       136119               AAQ             SVO  Moscow  Boeing 737-300   \n",
       "1       136120               AAQ             SVO  Moscow  Boeing 737-300   \n",
       "2       136122               AAQ             SVO  Moscow  Boeing 737-300   \n",
       "3       136130               AAQ             SVO  Moscow  Boeing 737-300   \n",
       "4       136131               AAQ             SVO  Moscow  Boeing 737-300   \n",
       "..         ...               ...             ...     ...             ...   \n",
       "172     136464               AAQ             SVO  Moscow  Boeing 737-300   \n",
       "173     136471               AAQ             SVO  Moscow  Boeing 737-300   \n",
       "174     136479               AAQ             SVO  Moscow  Boeing 737-300   \n",
       "175     136485               AAQ             SVO  Moscow  Boeing 737-300   \n",
       "176     136486               AAQ             SVO  Moscow  Boeing 737-300   \n",
       "\n",
       "           time_departure          time_arrival  tickets_cost  \\\n",
       "0    2017-01-03T10:05:00Z  2017-01-03T11:45:00Z       12200.0   \n",
       "1    2017-02-24T10:05:00Z  2017-02-24T11:45:00Z       12200.0   \n",
       "2    2017-01-08T10:05:00Z  2017-01-08T11:45:00Z       12200.0   \n",
       "3    2017-02-13T10:05:00Z  2017-02-13T11:45:00Z       12200.0   \n",
       "4    2017-01-28T10:05:00Z  2017-01-28T11:45:00Z       12200.0   \n",
       "..                    ...                   ...           ...   \n",
       "172  2017-01-09T10:05:00Z  2017-01-09T11:45:00Z       36600.0   \n",
       "173  2017-01-17T10:05:00Z  2017-01-17T11:45:00Z       36600.0   \n",
       "174  2017-02-21T10:05:00Z  2017-02-21T11:45:00Z       36600.0   \n",
       "175  2017-01-27T10:05:00Z  2017-01-27T11:45:00Z       36600.0   \n",
       "176  2017-02-02T10:05:00Z  2017-02-02T11:45:00Z       36600.0   \n",
       "\n",
       "     total_ticket_sale  flight_duration  fuel_expense  profit_total  \n",
       "0            1183400.0         1.666667      165400.0     1018000.0  \n",
       "1            1122400.0         1.666667      165400.0      957000.0  \n",
       "2            1024800.0         1.666667      165400.0      859400.0  \n",
       "3            1110200.0         1.666667      165400.0      944800.0  \n",
       "4            1293200.0         1.666667      165400.0     1127800.0  \n",
       "..                 ...              ...           ...           ...  \n",
       "172           256200.0         1.666667      165400.0       90800.0  \n",
       "173           439200.0         1.666667      165400.0      273800.0  \n",
       "174           366000.0         1.666667      165400.0      200600.0  \n",
       "175           329400.0         1.666667      165400.0      164000.0  \n",
       "176           292800.0         1.666667      165400.0      127400.0  \n",
       "\n",
       "[177 rows x 12 columns]"
      ]
     },
     "execution_count": 279,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "avia.loc[(avia['plane_model'] == 'Boeing 737-300') & (avia['flight_duration'] < 5)]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "На таком же самолете есть перелет только продолжительностью 1,66 часа это примерно в 3 раза меньше 5, поэтому возьмем серднее значение стоимости билетов по данной модели, и получившееся умножим значения на 3 и заполним ими пропуски. Грубовато, но пока сделаем так или посмотрим на другой датасет."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 280,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>flight_id</th>\n",
       "      <th>tickets_cost</th>\n",
       "      <th>total_ticket_sale</th>\n",
       "      <th>flight_duration</th>\n",
       "      <th>fuel_expense</th>\n",
       "      <th>profit_total</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>plane_model</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Boeing 737-300</th>\n",
       "      <td>136310.112903</td>\n",
       "      <td>20733.333333</td>\n",
       "      <td>547525.423729</td>\n",
       "      <td>1.831989</td>\n",
       "      <td>181806.612903</td>\n",
       "      <td>382125.423729</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Sukhoi Superjet-100</th>\n",
       "      <td>136768.220339</td>\n",
       "      <td>10700.000000</td>\n",
       "      <td>236811.864407</td>\n",
       "      <td>0.833333</td>\n",
       "      <td>58579.166667</td>\n",
       "      <td>178232.697740</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                         flight_id  tickets_cost  total_ticket_sale  \\\n",
       "plane_model                                                           \n",
       "Boeing 737-300       136310.112903  20733.333333      547525.423729   \n",
       "Sukhoi Superjet-100  136768.220339  10700.000000      236811.864407   \n",
       "\n",
       "                     flight_duration   fuel_expense   profit_total  \n",
       "plane_model                                                         \n",
       "Boeing 737-300              1.831989  181806.612903  382125.423729  \n",
       "Sukhoi Superjet-100         0.833333   58579.166667  178232.697740  "
      ]
     },
     "execution_count": 280,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "avia.groupby('plane_model').mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 281,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0   -85000.0\n",
       "dtype: float64"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# значение моды\n",
    "display(avia[avia['plane_model'] == 'Boeing 737-300']['profit_total'].mode())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 282,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "382125.42372881353"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# значение среднего\n",
    "display(avia[avia['plane_model'] == 'Boeing 737-300']['profit_total'].mean())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 283,
   "metadata": {},
   "outputs": [],
   "source": [
    "# для заполнения данных скачаем таблицу по NOZ с похожими данными\n",
    "avia_NOZ = pd.read_csv('NOZ winter 2017_1.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 284,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>flight_id</th>\n",
       "      <th>airport_departure</th>\n",
       "      <th>airport_arrival</th>\n",
       "      <th>city</th>\n",
       "      <th>plane_model</th>\n",
       "      <th>time_departure</th>\n",
       "      <th>time_arrival</th>\n",
       "      <th>tickets_cost</th>\n",
       "      <th>total_ticket_sale</th>\n",
       "      <th>flight_duration</th>\n",
       "      <th>fuel_expense</th>\n",
       "      <th>profit_total</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>181213</td>\n",
       "      <td>NOZ</td>\n",
       "      <td>KRR</td>\n",
       "      <td>Krasnodar</td>\n",
       "      <td>Boeing 737-300</td>\n",
       "      <td>2017-02-27T12:45:00Z</td>\n",
       "      <td>2017-02-27T17:40:00Z</td>\n",
       "      <td>35100.0</td>\n",
       "      <td>245700.0</td>\n",
       "      <td>4.916667</td>\n",
       "      <td>487930.0</td>\n",
       "      <td>-242230.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>181232</td>\n",
       "      <td>NOZ</td>\n",
       "      <td>KRR</td>\n",
       "      <td>Krasnodar</td>\n",
       "      <td>Boeing 737-300</td>\n",
       "      <td>2017-01-23T12:45:00Z</td>\n",
       "      <td>2017-01-23T17:40:00Z</td>\n",
       "      <td>35100.0</td>\n",
       "      <td>245700.0</td>\n",
       "      <td>4.916667</td>\n",
       "      <td>487930.0</td>\n",
       "      <td>-242230.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>181235</td>\n",
       "      <td>NOZ</td>\n",
       "      <td>KRR</td>\n",
       "      <td>Krasnodar</td>\n",
       "      <td>Boeing 737-300</td>\n",
       "      <td>2017-02-13T12:45:00Z</td>\n",
       "      <td>2017-02-13T17:40:00Z</td>\n",
       "      <td>35100.0</td>\n",
       "      <td>386100.0</td>\n",
       "      <td>4.916667</td>\n",
       "      <td>487930.0</td>\n",
       "      <td>-101830.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>181242</td>\n",
       "      <td>NOZ</td>\n",
       "      <td>KRR</td>\n",
       "      <td>Krasnodar</td>\n",
       "      <td>Boeing 737-300</td>\n",
       "      <td>2017-02-06T12:45:00Z</td>\n",
       "      <td>2017-02-06T17:40:00Z</td>\n",
       "      <td>35100.0</td>\n",
       "      <td>351000.0</td>\n",
       "      <td>4.916667</td>\n",
       "      <td>487930.0</td>\n",
       "      <td>-136930.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>181246</td>\n",
       "      <td>NOZ</td>\n",
       "      <td>KRR</td>\n",
       "      <td>Krasnodar</td>\n",
       "      <td>Boeing 737-300</td>\n",
       "      <td>2017-01-16T12:45:00Z</td>\n",
       "      <td>2017-01-16T17:40:00Z</td>\n",
       "      <td>35100.0</td>\n",
       "      <td>210600.0</td>\n",
       "      <td>4.916667</td>\n",
       "      <td>487930.0</td>\n",
       "      <td>-277330.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>181247</td>\n",
       "      <td>NOZ</td>\n",
       "      <td>KRR</td>\n",
       "      <td>Krasnodar</td>\n",
       "      <td>Boeing 737-300</td>\n",
       "      <td>2017-01-02T12:45:00Z</td>\n",
       "      <td>2017-01-02T17:40:00Z</td>\n",
       "      <td>35100.0</td>\n",
       "      <td>280800.0</td>\n",
       "      <td>4.916667</td>\n",
       "      <td>487930.0</td>\n",
       "      <td>-207130.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>181250</td>\n",
       "      <td>NOZ</td>\n",
       "      <td>KRR</td>\n",
       "      <td>Krasnodar</td>\n",
       "      <td>Boeing 737-300</td>\n",
       "      <td>2017-01-30T12:45:00Z</td>\n",
       "      <td>2017-01-30T17:40:00Z</td>\n",
       "      <td>35100.0</td>\n",
       "      <td>351000.0</td>\n",
       "      <td>4.916667</td>\n",
       "      <td>487930.0</td>\n",
       "      <td>-136930.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>181257</td>\n",
       "      <td>NOZ</td>\n",
       "      <td>KRR</td>\n",
       "      <td>Krasnodar</td>\n",
       "      <td>Boeing 737-300</td>\n",
       "      <td>2017-02-20T12:45:00Z</td>\n",
       "      <td>2017-02-20T17:40:00Z</td>\n",
       "      <td>35100.0</td>\n",
       "      <td>315900.0</td>\n",
       "      <td>4.916667</td>\n",
       "      <td>487930.0</td>\n",
       "      <td>-172030.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>181260</td>\n",
       "      <td>NOZ</td>\n",
       "      <td>KRR</td>\n",
       "      <td>Krasnodar</td>\n",
       "      <td>Boeing 737-300</td>\n",
       "      <td>2017-01-09T12:45:00Z</td>\n",
       "      <td>2017-01-09T17:40:00Z</td>\n",
       "      <td>35100.0</td>\n",
       "      <td>456300.0</td>\n",
       "      <td>4.916667</td>\n",
       "      <td>487930.0</td>\n",
       "      <td>-31630.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>181670</td>\n",
       "      <td>NOZ</td>\n",
       "      <td>AER</td>\n",
       "      <td>Sochi</td>\n",
       "      <td>Boeing 737-300</td>\n",
       "      <td>2017-02-07T04:40:00Z</td>\n",
       "      <td>2017-02-07T09:35:00Z</td>\n",
       "      <td>35600.0</td>\n",
       "      <td>569600.0</td>\n",
       "      <td>4.916667</td>\n",
       "      <td>487930.0</td>\n",
       "      <td>81670.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   flight_id airport_departure airport_arrival       city     plane_model  \\\n",
       "0     181213               NOZ             KRR  Krasnodar  Boeing 737-300   \n",
       "1     181232               NOZ             KRR  Krasnodar  Boeing 737-300   \n",
       "2     181235               NOZ             KRR  Krasnodar  Boeing 737-300   \n",
       "3     181242               NOZ             KRR  Krasnodar  Boeing 737-300   \n",
       "4     181246               NOZ             KRR  Krasnodar  Boeing 737-300   \n",
       "5     181247               NOZ             KRR  Krasnodar  Boeing 737-300   \n",
       "6     181250               NOZ             KRR  Krasnodar  Boeing 737-300   \n",
       "7     181257               NOZ             KRR  Krasnodar  Boeing 737-300   \n",
       "8     181260               NOZ             KRR  Krasnodar  Boeing 737-300   \n",
       "9     181670               NOZ             AER      Sochi  Boeing 737-300   \n",
       "\n",
       "         time_departure          time_arrival  tickets_cost  \\\n",
       "0  2017-02-27T12:45:00Z  2017-02-27T17:40:00Z       35100.0   \n",
       "1  2017-01-23T12:45:00Z  2017-01-23T17:40:00Z       35100.0   \n",
       "2  2017-02-13T12:45:00Z  2017-02-13T17:40:00Z       35100.0   \n",
       "3  2017-02-06T12:45:00Z  2017-02-06T17:40:00Z       35100.0   \n",
       "4  2017-01-16T12:45:00Z  2017-01-16T17:40:00Z       35100.0   \n",
       "5  2017-01-02T12:45:00Z  2017-01-02T17:40:00Z       35100.0   \n",
       "6  2017-01-30T12:45:00Z  2017-01-30T17:40:00Z       35100.0   \n",
       "7  2017-02-20T12:45:00Z  2017-02-20T17:40:00Z       35100.0   \n",
       "8  2017-01-09T12:45:00Z  2017-01-09T17:40:00Z       35100.0   \n",
       "9  2017-02-07T04:40:00Z  2017-02-07T09:35:00Z       35600.0   \n",
       "\n",
       "   total_ticket_sale  flight_duration  fuel_expense  profit_total  \n",
       "0           245700.0         4.916667      487930.0     -242230.0  \n",
       "1           245700.0         4.916667      487930.0     -242230.0  \n",
       "2           386100.0         4.916667      487930.0     -101830.0  \n",
       "3           351000.0         4.916667      487930.0     -136930.0  \n",
       "4           210600.0         4.916667      487930.0     -277330.0  \n",
       "5           280800.0         4.916667      487930.0     -207130.0  \n",
       "6           351000.0         4.916667      487930.0     -136930.0  \n",
       "7           315900.0         4.916667      487930.0     -172030.0  \n",
       "8           456300.0         4.916667      487930.0      -31630.0  \n",
       "9           569600.0         4.916667      487930.0       81670.0  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 74 entries, 0 to 73\n",
      "Data columns (total 12 columns):\n",
      " #   Column             Non-Null Count  Dtype  \n",
      "---  ------             --------------  -----  \n",
      " 0   flight_id          74 non-null     int64  \n",
      " 1   airport_departure  74 non-null     object \n",
      " 2   airport_arrival    74 non-null     object \n",
      " 3   city               74 non-null     object \n",
      " 4   plane_model        74 non-null     object \n",
      " 5   time_departure     74 non-null     object \n",
      " 6   time_arrival       74 non-null     object \n",
      " 7   tickets_cost       65 non-null     float64\n",
      " 8   total_ticket_sale  65 non-null     float64\n",
      " 9   flight_duration    74 non-null     float64\n",
      " 10  fuel_expense       74 non-null     float64\n",
      " 11  profit_total       65 non-null     float64\n",
      "dtypes: float64(5), int64(1), object(6)\n",
      "memory usage: 7.1+ KB\n"
     ]
    }
   ],
   "source": [
    "display(avia_NOZ.head(10))\n",
    "avia_NOZ.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 285,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0   -381130.0\n",
       "dtype: float64"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# значение моды\n",
    "display(avia_NOZ[avia_NOZ['plane_model'] == 'Boeing 737-300']['profit_total'].mode())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 286,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "-204051.53846153847"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# значение среднего\n",
    "display(avia_NOZ[avia_NOZ['plane_model'] == 'Boeing 737-300']['profit_total'].mean())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 287,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>flight_id</th>\n",
       "      <th>airport_departure</th>\n",
       "      <th>airport_arrival</th>\n",
       "      <th>city</th>\n",
       "      <th>plane_model</th>\n",
       "      <th>time_departure</th>\n",
       "      <th>time_arrival</th>\n",
       "      <th>tickets_cost</th>\n",
       "      <th>total_ticket_sale</th>\n",
       "      <th>flight_duration</th>\n",
       "      <th>fuel_expense</th>\n",
       "      <th>profit_total</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>136119</td>\n",
       "      <td>AAQ</td>\n",
       "      <td>SVO</td>\n",
       "      <td>Moscow</td>\n",
       "      <td>Boeing 737-300</td>\n",
       "      <td>2017-01-03T10:05:00Z</td>\n",
       "      <td>2017-01-03T11:45:00Z</td>\n",
       "      <td>12200.0</td>\n",
       "      <td>1183400.0</td>\n",
       "      <td>1.666667</td>\n",
       "      <td>165400.000000</td>\n",
       "      <td>1.018000e+06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>136120</td>\n",
       "      <td>AAQ</td>\n",
       "      <td>SVO</td>\n",
       "      <td>Moscow</td>\n",
       "      <td>Boeing 737-300</td>\n",
       "      <td>2017-02-24T10:05:00Z</td>\n",
       "      <td>2017-02-24T11:45:00Z</td>\n",
       "      <td>12200.0</td>\n",
       "      <td>1122400.0</td>\n",
       "      <td>1.666667</td>\n",
       "      <td>165400.000000</td>\n",
       "      <td>9.570000e+05</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>136122</td>\n",
       "      <td>AAQ</td>\n",
       "      <td>SVO</td>\n",
       "      <td>Moscow</td>\n",
       "      <td>Boeing 737-300</td>\n",
       "      <td>2017-01-08T10:05:00Z</td>\n",
       "      <td>2017-01-08T11:45:00Z</td>\n",
       "      <td>12200.0</td>\n",
       "      <td>1024800.0</td>\n",
       "      <td>1.666667</td>\n",
       "      <td>165400.000000</td>\n",
       "      <td>8.594000e+05</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>136130</td>\n",
       "      <td>AAQ</td>\n",
       "      <td>SVO</td>\n",
       "      <td>Moscow</td>\n",
       "      <td>Boeing 737-300</td>\n",
       "      <td>2017-02-13T10:05:00Z</td>\n",
       "      <td>2017-02-13T11:45:00Z</td>\n",
       "      <td>12200.0</td>\n",
       "      <td>1110200.0</td>\n",
       "      <td>1.666667</td>\n",
       "      <td>165400.000000</td>\n",
       "      <td>9.448000e+05</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>136131</td>\n",
       "      <td>AAQ</td>\n",
       "      <td>SVO</td>\n",
       "      <td>Moscow</td>\n",
       "      <td>Boeing 737-300</td>\n",
       "      <td>2017-01-28T10:05:00Z</td>\n",
       "      <td>2017-01-28T11:45:00Z</td>\n",
       "      <td>12200.0</td>\n",
       "      <td>1293200.0</td>\n",
       "      <td>1.666667</td>\n",
       "      <td>165400.000000</td>\n",
       "      <td>1.127800e+06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>358</th>\n",
       "      <td>136936</td>\n",
       "      <td>AAQ</td>\n",
       "      <td>EGO</td>\n",
       "      <td>Belgorod</td>\n",
       "      <td>Sukhoi Superjet-100</td>\n",
       "      <td>2017-01-02T09:25:00Z</td>\n",
       "      <td>2017-01-02T10:15:00Z</td>\n",
       "      <td>18900.0</td>\n",
       "      <td>170100.0</td>\n",
       "      <td>0.833333</td>\n",
       "      <td>58579.166667</td>\n",
       "      <td>1.115208e+05</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>359</th>\n",
       "      <td>136937</td>\n",
       "      <td>AAQ</td>\n",
       "      <td>EGO</td>\n",
       "      <td>Belgorod</td>\n",
       "      <td>Sukhoi Superjet-100</td>\n",
       "      <td>2017-01-03T09:25:00Z</td>\n",
       "      <td>2017-01-03T10:15:00Z</td>\n",
       "      <td>18900.0</td>\n",
       "      <td>170100.0</td>\n",
       "      <td>0.833333</td>\n",
       "      <td>58579.166667</td>\n",
       "      <td>1.115208e+05</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>360</th>\n",
       "      <td>136951</td>\n",
       "      <td>AAQ</td>\n",
       "      <td>EGO</td>\n",
       "      <td>Belgorod</td>\n",
       "      <td>Sukhoi Superjet-100</td>\n",
       "      <td>2017-02-02T09:25:00Z</td>\n",
       "      <td>2017-02-02T10:15:00Z</td>\n",
       "      <td>18900.0</td>\n",
       "      <td>226800.0</td>\n",
       "      <td>0.833333</td>\n",
       "      <td>58579.166667</td>\n",
       "      <td>1.682208e+05</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>361</th>\n",
       "      <td>136953</td>\n",
       "      <td>AAQ</td>\n",
       "      <td>EGO</td>\n",
       "      <td>Belgorod</td>\n",
       "      <td>Sukhoi Superjet-100</td>\n",
       "      <td>2017-02-27T09:25:00Z</td>\n",
       "      <td>2017-02-27T10:15:00Z</td>\n",
       "      <td>18900.0</td>\n",
       "      <td>226800.0</td>\n",
       "      <td>0.833333</td>\n",
       "      <td>58579.166667</td>\n",
       "      <td>1.682208e+05</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>362</th>\n",
       "      <td>136956</td>\n",
       "      <td>AAQ</td>\n",
       "      <td>EGO</td>\n",
       "      <td>Belgorod</td>\n",
       "      <td>Sukhoi Superjet-100</td>\n",
       "      <td>2017-02-04T09:25:00Z</td>\n",
       "      <td>2017-02-04T10:15:00Z</td>\n",
       "      <td>18900.0</td>\n",
       "      <td>207900.0</td>\n",
       "      <td>0.833333</td>\n",
       "      <td>58579.166667</td>\n",
       "      <td>1.493208e+05</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>363 rows × 12 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     flight_id airport_departure airport_arrival      city  \\\n",
       "0       136119               AAQ             SVO    Moscow   \n",
       "1       136120               AAQ             SVO    Moscow   \n",
       "2       136122               AAQ             SVO    Moscow   \n",
       "3       136130               AAQ             SVO    Moscow   \n",
       "4       136131               AAQ             SVO    Moscow   \n",
       "..         ...               ...             ...       ...   \n",
       "358     136936               AAQ             EGO  Belgorod   \n",
       "359     136937               AAQ             EGO  Belgorod   \n",
       "360     136951               AAQ             EGO  Belgorod   \n",
       "361     136953               AAQ             EGO  Belgorod   \n",
       "362     136956               AAQ             EGO  Belgorod   \n",
       "\n",
       "             plane_model        time_departure          time_arrival  \\\n",
       "0         Boeing 737-300  2017-01-03T10:05:00Z  2017-01-03T11:45:00Z   \n",
       "1         Boeing 737-300  2017-02-24T10:05:00Z  2017-02-24T11:45:00Z   \n",
       "2         Boeing 737-300  2017-01-08T10:05:00Z  2017-01-08T11:45:00Z   \n",
       "3         Boeing 737-300  2017-02-13T10:05:00Z  2017-02-13T11:45:00Z   \n",
       "4         Boeing 737-300  2017-01-28T10:05:00Z  2017-01-28T11:45:00Z   \n",
       "..                   ...                   ...                   ...   \n",
       "358  Sukhoi Superjet-100  2017-01-02T09:25:00Z  2017-01-02T10:15:00Z   \n",
       "359  Sukhoi Superjet-100  2017-01-03T09:25:00Z  2017-01-03T10:15:00Z   \n",
       "360  Sukhoi Superjet-100  2017-02-02T09:25:00Z  2017-02-02T10:15:00Z   \n",
       "361  Sukhoi Superjet-100  2017-02-27T09:25:00Z  2017-02-27T10:15:00Z   \n",
       "362  Sukhoi Superjet-100  2017-02-04T09:25:00Z  2017-02-04T10:15:00Z   \n",
       "\n",
       "     tickets_cost  total_ticket_sale  flight_duration   fuel_expense  \\\n",
       "0         12200.0          1183400.0         1.666667  165400.000000   \n",
       "1         12200.0          1122400.0         1.666667  165400.000000   \n",
       "2         12200.0          1024800.0         1.666667  165400.000000   \n",
       "3         12200.0          1110200.0         1.666667  165400.000000   \n",
       "4         12200.0          1293200.0         1.666667  165400.000000   \n",
       "..            ...                ...              ...            ...   \n",
       "358       18900.0           170100.0         0.833333   58579.166667   \n",
       "359       18900.0           170100.0         0.833333   58579.166667   \n",
       "360       18900.0           226800.0         0.833333   58579.166667   \n",
       "361       18900.0           226800.0         0.833333   58579.166667   \n",
       "362       18900.0           207900.0         0.833333   58579.166667   \n",
       "\n",
       "     profit_total  \n",
       "0    1.018000e+06  \n",
       "1    9.570000e+05  \n",
       "2    8.594000e+05  \n",
       "3    9.448000e+05  \n",
       "4    1.127800e+06  \n",
       "..            ...  \n",
       "358  1.115208e+05  \n",
       "359  1.115208e+05  \n",
       "360  1.682208e+05  \n",
       "361  1.682208e+05  \n",
       "362  1.493208e+05  \n",
       "\n",
       "[363 rows x 12 columns]"
      ]
     },
     "execution_count": 287,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Я не знаю как сделать объективнее, но проанализировав данные, чем отрицательными значениями, \n",
    "# лучше заполнить нулями\n",
    "avia.fillna(0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 288,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count     363\n",
       "unique      3\n",
       "top       EGO\n",
       "freq      177\n",
       "Name: airport_arrival, dtype: object"
      ]
     },
     "execution_count": 288,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "avia.airport_arrival.hist()\n",
    "avia.airport_arrival.describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Однинаковое количество рейсов в Москву и Белгород, 175-177."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 289,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "plane_model\n",
       "Boeing 737-300         AxesSubplot(0.125,0.125;0.775x0.755)\n",
       "Sukhoi Superjet-100    AxesSubplot(0.125,0.125;0.775x0.755)\n",
       "Name: profit_total, dtype: object"
      ]
     },
     "execution_count": 289,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# из данного графика я ничего не вижу.\n",
    "avia.groupby('plane_model')['profit_total'].plot.bar()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 309,
   "metadata": {},
   "outputs": [],
   "source": [
    "# создадим датасет с не прибыльными рейсами и посмотрим может там есть закономерность\n",
    "avia_fail = avia[avia['profit_total'] < 0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 310,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>flight_id</th>\n",
       "      <th>airport_departure</th>\n",
       "      <th>airport_arrival</th>\n",
       "      <th>city</th>\n",
       "      <th>plane_model</th>\n",
       "      <th>time_departure</th>\n",
       "      <th>time_arrival</th>\n",
       "      <th>tickets_cost</th>\n",
       "      <th>total_ticket_sale</th>\n",
       "      <th>flight_duration</th>\n",
       "      <th>fuel_expense</th>\n",
       "      <th>profit_total</th>\n",
       "      <th>day_of_week_departure</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>59</th>\n",
       "      <td>136119</td>\n",
       "      <td>AAQ</td>\n",
       "      <td>SVO</td>\n",
       "      <td>Moscow</td>\n",
       "      <td>Boeing 737-300</td>\n",
       "      <td>2017-01-03 10:05:00+00:00</td>\n",
       "      <td>2017-01-03T11:45:00Z</td>\n",
       "      <td>13400.0</td>\n",
       "      <td>67000.0</td>\n",
       "      <td>1.666667</td>\n",
       "      <td>165400.000000</td>\n",
       "      <td>-98400.000000</td>\n",
       "      <td>Tuesday</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>60</th>\n",
       "      <td>136120</td>\n",
       "      <td>AAQ</td>\n",
       "      <td>SVO</td>\n",
       "      <td>Moscow</td>\n",
       "      <td>Boeing 737-300</td>\n",
       "      <td>2017-02-24 10:05:00+00:00</td>\n",
       "      <td>2017-02-24T11:45:00Z</td>\n",
       "      <td>13400.0</td>\n",
       "      <td>80400.0</td>\n",
       "      <td>1.666667</td>\n",
       "      <td>165400.000000</td>\n",
       "      <td>-85000.000000</td>\n",
       "      <td>Friday</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>61</th>\n",
       "      <td>136122</td>\n",
       "      <td>AAQ</td>\n",
       "      <td>SVO</td>\n",
       "      <td>Moscow</td>\n",
       "      <td>Boeing 737-300</td>\n",
       "      <td>2017-01-08 10:05:00+00:00</td>\n",
       "      <td>2017-01-08T11:45:00Z</td>\n",
       "      <td>13400.0</td>\n",
       "      <td>40200.0</td>\n",
       "      <td>1.666667</td>\n",
       "      <td>165400.000000</td>\n",
       "      <td>-125200.000000</td>\n",
       "      <td>Sunday</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>62</th>\n",
       "      <td>136130</td>\n",
       "      <td>AAQ</td>\n",
       "      <td>SVO</td>\n",
       "      <td>Moscow</td>\n",
       "      <td>Boeing 737-300</td>\n",
       "      <td>2017-02-13 10:05:00+00:00</td>\n",
       "      <td>2017-02-13T11:45:00Z</td>\n",
       "      <td>13400.0</td>\n",
       "      <td>80400.0</td>\n",
       "      <td>1.666667</td>\n",
       "      <td>165400.000000</td>\n",
       "      <td>-85000.000000</td>\n",
       "      <td>Monday</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>63</th>\n",
       "      <td>136131</td>\n",
       "      <td>AAQ</td>\n",
       "      <td>SVO</td>\n",
       "      <td>Moscow</td>\n",
       "      <td>Boeing 737-300</td>\n",
       "      <td>2017-01-28 10:05:00+00:00</td>\n",
       "      <td>2017-01-28T11:45:00Z</td>\n",
       "      <td>13400.0</td>\n",
       "      <td>80400.0</td>\n",
       "      <td>1.666667</td>\n",
       "      <td>165400.000000</td>\n",
       "      <td>-85000.000000</td>\n",
       "      <td>Saturday</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>299</th>\n",
       "      <td>136936</td>\n",
       "      <td>AAQ</td>\n",
       "      <td>EGO</td>\n",
       "      <td>Belgorod</td>\n",
       "      <td>Sukhoi Superjet-100</td>\n",
       "      <td>2017-01-02 09:25:00+00:00</td>\n",
       "      <td>2017-01-02T10:15:00Z</td>\n",
       "      <td>6900.0</td>\n",
       "      <td>27600.0</td>\n",
       "      <td>0.833333</td>\n",
       "      <td>58579.166667</td>\n",
       "      <td>-30979.166667</td>\n",
       "      <td>Monday</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>300</th>\n",
       "      <td>136937</td>\n",
       "      <td>AAQ</td>\n",
       "      <td>EGO</td>\n",
       "      <td>Belgorod</td>\n",
       "      <td>Sukhoi Superjet-100</td>\n",
       "      <td>2017-01-03 09:25:00+00:00</td>\n",
       "      <td>2017-01-03T10:15:00Z</td>\n",
       "      <td>6900.0</td>\n",
       "      <td>27600.0</td>\n",
       "      <td>0.833333</td>\n",
       "      <td>58579.166667</td>\n",
       "      <td>-30979.166667</td>\n",
       "      <td>Tuesday</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>301</th>\n",
       "      <td>136951</td>\n",
       "      <td>AAQ</td>\n",
       "      <td>EGO</td>\n",
       "      <td>Belgorod</td>\n",
       "      <td>Sukhoi Superjet-100</td>\n",
       "      <td>2017-02-02 09:25:00+00:00</td>\n",
       "      <td>2017-02-02T10:15:00Z</td>\n",
       "      <td>6900.0</td>\n",
       "      <td>27600.0</td>\n",
       "      <td>0.833333</td>\n",
       "      <td>58579.166667</td>\n",
       "      <td>-30979.166667</td>\n",
       "      <td>Thursday</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>302</th>\n",
       "      <td>136953</td>\n",
       "      <td>AAQ</td>\n",
       "      <td>EGO</td>\n",
       "      <td>Belgorod</td>\n",
       "      <td>Sukhoi Superjet-100</td>\n",
       "      <td>2017-02-27 09:25:00+00:00</td>\n",
       "      <td>2017-02-27T10:15:00Z</td>\n",
       "      <td>6900.0</td>\n",
       "      <td>34500.0</td>\n",
       "      <td>0.833333</td>\n",
       "      <td>58579.166667</td>\n",
       "      <td>-24079.166667</td>\n",
       "      <td>Monday</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>303</th>\n",
       "      <td>136956</td>\n",
       "      <td>AAQ</td>\n",
       "      <td>EGO</td>\n",
       "      <td>Belgorod</td>\n",
       "      <td>Sukhoi Superjet-100</td>\n",
       "      <td>2017-02-04 09:25:00+00:00</td>\n",
       "      <td>2017-02-04T10:15:00Z</td>\n",
       "      <td>6900.0</td>\n",
       "      <td>34500.0</td>\n",
       "      <td>0.833333</td>\n",
       "      <td>58579.166667</td>\n",
       "      <td>-24079.166667</td>\n",
       "      <td>Saturday</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>118 rows × 13 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     flight_id airport_departure airport_arrival      city  \\\n",
       "59      136119               AAQ             SVO    Moscow   \n",
       "60      136120               AAQ             SVO    Moscow   \n",
       "61      136122               AAQ             SVO    Moscow   \n",
       "62      136130               AAQ             SVO    Moscow   \n",
       "63      136131               AAQ             SVO    Moscow   \n",
       "..         ...               ...             ...       ...   \n",
       "299     136936               AAQ             EGO  Belgorod   \n",
       "300     136937               AAQ             EGO  Belgorod   \n",
       "301     136951               AAQ             EGO  Belgorod   \n",
       "302     136953               AAQ             EGO  Belgorod   \n",
       "303     136956               AAQ             EGO  Belgorod   \n",
       "\n",
       "             plane_model            time_departure          time_arrival  \\\n",
       "59        Boeing 737-300 2017-01-03 10:05:00+00:00  2017-01-03T11:45:00Z   \n",
       "60        Boeing 737-300 2017-02-24 10:05:00+00:00  2017-02-24T11:45:00Z   \n",
       "61        Boeing 737-300 2017-01-08 10:05:00+00:00  2017-01-08T11:45:00Z   \n",
       "62        Boeing 737-300 2017-02-13 10:05:00+00:00  2017-02-13T11:45:00Z   \n",
       "63        Boeing 737-300 2017-01-28 10:05:00+00:00  2017-01-28T11:45:00Z   \n",
       "..                   ...                       ...                   ...   \n",
       "299  Sukhoi Superjet-100 2017-01-02 09:25:00+00:00  2017-01-02T10:15:00Z   \n",
       "300  Sukhoi Superjet-100 2017-01-03 09:25:00+00:00  2017-01-03T10:15:00Z   \n",
       "301  Sukhoi Superjet-100 2017-02-02 09:25:00+00:00  2017-02-02T10:15:00Z   \n",
       "302  Sukhoi Superjet-100 2017-02-27 09:25:00+00:00  2017-02-27T10:15:00Z   \n",
       "303  Sukhoi Superjet-100 2017-02-04 09:25:00+00:00  2017-02-04T10:15:00Z   \n",
       "\n",
       "     tickets_cost  total_ticket_sale  flight_duration   fuel_expense  \\\n",
       "59        13400.0            67000.0         1.666667  165400.000000   \n",
       "60        13400.0            80400.0         1.666667  165400.000000   \n",
       "61        13400.0            40200.0         1.666667  165400.000000   \n",
       "62        13400.0            80400.0         1.666667  165400.000000   \n",
       "63        13400.0            80400.0         1.666667  165400.000000   \n",
       "..            ...                ...              ...            ...   \n",
       "299        6900.0            27600.0         0.833333   58579.166667   \n",
       "300        6900.0            27600.0         0.833333   58579.166667   \n",
       "301        6900.0            27600.0         0.833333   58579.166667   \n",
       "302        6900.0            34500.0         0.833333   58579.166667   \n",
       "303        6900.0            34500.0         0.833333   58579.166667   \n",
       "\n",
       "      profit_total day_of_week_departure  \n",
       "59   -98400.000000               Tuesday  \n",
       "60   -85000.000000                Friday  \n",
       "61  -125200.000000                Sunday  \n",
       "62   -85000.000000                Monday  \n",
       "63   -85000.000000              Saturday  \n",
       "..             ...                   ...  \n",
       "299  -30979.166667                Monday  \n",
       "300  -30979.166667               Tuesday  \n",
       "301  -30979.166667              Thursday  \n",
       "302  -24079.166667                Monday  \n",
       "303  -24079.166667              Saturday  \n",
       "\n",
       "[118 rows x 13 columns]"
      ]
     },
     "execution_count": 310,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "avia_fail"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 336,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>flight_id</th>\n",
       "      <th>tickets_cost</th>\n",
       "      <th>total_ticket_sale</th>\n",
       "      <th>flight_duration</th>\n",
       "      <th>fuel_expense</th>\n",
       "      <th>profit_total</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>118.000000</td>\n",
       "      <td>118.000000</td>\n",
       "      <td>118.000000</td>\n",
       "      <td>118.000000</td>\n",
       "      <td>118.000000</td>\n",
       "      <td>118.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>136533.440678</td>\n",
       "      <td>10150.000000</td>\n",
       "      <td>50320.338983</td>\n",
       "      <td>1.250000</td>\n",
       "      <td>111989.583333</td>\n",
       "      <td>61669.244350</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>261.971994</td>\n",
       "      <td>3263.859338</td>\n",
       "      <td>20502.968554</td>\n",
       "      <td>0.418444</td>\n",
       "      <td>53638.180671</td>\n",
       "      <td>36792.012421</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>136119.000000</td>\n",
       "      <td>6900.000000</td>\n",
       "      <td>13800.000000</td>\n",
       "      <td>0.833333</td>\n",
       "      <td>58579.166667</td>\n",
       "      <td>24079.166667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>136286.250000</td>\n",
       "      <td>6900.000000</td>\n",
       "      <td>34500.000000</td>\n",
       "      <td>0.833333</td>\n",
       "      <td>58579.166667</td>\n",
       "      <td>24079.166667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>136528.500000</td>\n",
       "      <td>10150.000000</td>\n",
       "      <td>34500.000000</td>\n",
       "      <td>1.250000</td>\n",
       "      <td>111989.583333</td>\n",
       "      <td>64889.583333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>136768.500000</td>\n",
       "      <td>13400.000000</td>\n",
       "      <td>67000.000000</td>\n",
       "      <td>1.666667</td>\n",
       "      <td>165400.000000</td>\n",
       "      <td>98400.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>136956.000000</td>\n",
       "      <td>13400.000000</td>\n",
       "      <td>80400.000000</td>\n",
       "      <td>1.666667</td>\n",
       "      <td>165400.000000</td>\n",
       "      <td>138600.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           flight_id  tickets_cost  total_ticket_sale  flight_duration  \\\n",
       "count     118.000000    118.000000         118.000000       118.000000   \n",
       "mean   136533.440678  10150.000000       50320.338983         1.250000   \n",
       "std       261.971994   3263.859338       20502.968554         0.418444   \n",
       "min    136119.000000   6900.000000       13800.000000         0.833333   \n",
       "25%    136286.250000   6900.000000       34500.000000         0.833333   \n",
       "50%    136528.500000  10150.000000       34500.000000         1.250000   \n",
       "75%    136768.500000  13400.000000       67000.000000         1.666667   \n",
       "max    136956.000000  13400.000000       80400.000000         1.666667   \n",
       "\n",
       "        fuel_expense   profit_total  \n",
       "count     118.000000     118.000000  \n",
       "mean   111989.583333   61669.244350  \n",
       "std     53638.180671   36792.012421  \n",
       "min     58579.166667   24079.166667  \n",
       "25%     58579.166667   24079.166667  \n",
       "50%    111989.583333   64889.583333  \n",
       "75%    165400.000000   98400.000000  \n",
       "max    165400.000000  138600.000000  "
      ]
     },
     "execution_count": 336,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "avia_fail.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 292,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count     118\n",
       "unique      2\n",
       "top       SVO\n",
       "freq       59\n",
       "Name: airport_arrival, dtype: object"
      ]
     },
     "execution_count": 292,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "avia_fail.airport_arrival.hist()\n",
    "avia_fail.airport_arrival.describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Данная гистрограмма говорит, что из примерно 175 рейсов в Москву и Белгород - около 60 убыточные. И по Новокузнецку тоже - чуть меньше половины убыточные."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 293,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([<matplotlib.axes._subplots.AxesSubplot object at 0x11a8e6b50>],\n",
       "      dtype=object)"
      ]
     },
     "execution_count": 293,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x216 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Тут мы видим, что рейсы на Boeing выгоднее чем на Sukhoi Superjet\n",
    "avia.groupby('plane_model')['profit_total'].agg('mean').plot.pie(subplots=True,figsize=(8, 3))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 294,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count                363\n",
       "unique                 2\n",
       "top       Boeing 737-300\n",
       "freq                 186\n",
       "Name: plane_model, dtype: object"
      ]
     },
     "execution_count": 294,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Количество рейсов на данных моделях примерно одинаковое.\n",
    "avia.plane_model.hist()\n",
    "avia.plane_model.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 295,
   "metadata": {},
   "outputs": [],
   "source": [
    "# теперь рассмотрим дату вылета по дням недели\n",
    "avia['time_departure'] = pd.to_datetime(avia['time_departure'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 296,
   "metadata": {},
   "outputs": [],
   "source": [
    "avia['day_of_week_departure'] = avia['time_departure'].dt.day_name()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 297,
   "metadata": {},
   "outputs": [],
   "source": [
    "# меняем plane_model на последовательные числа -1,2\n",
    "replace_plane_model = {'Boeing 737-300': 1, 'Sukhoi Superjet-100': 2}\n",
    "avia1 = avia.replace({\"plane_model\": replace_plane_model})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 298,
   "metadata": {},
   "outputs": [],
   "source": [
    "# меняем airport_arrival на последовательные числа -1,2,3\n",
    "replace_airport_arrival = {'SVO': 1, 'EGO': 2, 'NOZ': 3}\n",
    "avia2 = avia1.replace({\"airport_arrival\": replace_airport_arrival})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 299,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count         363\n",
       "unique          7\n",
       "top       Tuesday\n",
       "freq           63\n",
       "Name: day_of_week_departure, dtype: object"
      ]
     },
     "execution_count": 299,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "avia.day_of_week_departure.hist()\n",
    "avia.day_of_week_departure.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 300,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([<matplotlib.axes._subplots.AxesSubplot object at 0x11aa7f0a0>],\n",
       "      dtype=object)"
      ]
     },
     "execution_count": 300,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x216 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# дни недели не влияют на прибыльность рейсов.\n",
    "avia.groupby('day_of_week_departure')['profit_total'].agg('mean').plot.pie(subplots=True,figsize=(8, 3))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 333,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "day_of_week_departure\n",
       "Friday       288141.666667\n",
       "Monday       274577.083333\n",
       "Saturday     285522.916667\n",
       "Sunday       262697.453704\n",
       "Thursday     279743.750000\n",
       "Tuesday      288732.638889\n",
       "Wednesday    283654.166667\n",
       "Name: profit_total, dtype: float64"
      ]
     },
     "execution_count": 333,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "avia.groupby('day_of_week_departure')['profit_total'].agg('mean')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 334,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([<matplotlib.axes._subplots.AxesSubplot object at 0x11b5415b0>],\n",
       "      dtype=object)"
      ]
     },
     "execution_count": 334,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAPUAAACxCAYAAAAcePsfAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4yLjIsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+WH4yJAAAgAElEQVR4nO2deXxU5bnHv0921iCIigYIghCEUXZFjWCqVgUXKm61WtRrtTdWbWlv6fXWG7WtaRXRKja90krUVtGqrSW1LiCboKxhjSBL2PclBEhmMjPP/eOckTEmmUkyZ84s5/v5zCczZ97zvs8k+c27Pe/ziKri4OCQOKTYbYCDg0NkcUTt4JBgOKJ2cEgwHFE7OCQYjqgdHBIMR9QODgmGI2oHhwTDEbWDQ4LhiNrBIcFwRO3gkGA4onZwSDAcUTs4JBiOqB0cEgxH1A4OCYYjaoeQiIiKyKtBr9NEZL+IzIxQ/UUi8tNI1OXgiNohPI4DA0Wkjfn6CmCnjfY4NIEjaodweR8YYz6/DXg98IaIdBaRv4vIKhH5TETOM68XicifRWSOiGwWkQeD7nlERNaLyMdAv6Dr94rIEhFZKSJvi0hbEekgIltEJN0s01FEKgOvHb6OI2qHcHkDuFVEsoDzgM+D3nsMWKGq5wH/DbwS9F4e8G1gBPC/IpIuIkOBW4HBwHeA4UHl31HV4ap6PlAB3KOq1cAcTn6p3Aq8rap1Ef6MCYEjaoewUNVVQC5GL/2vem9fArxqlpsNdBGRbPO9MlV1q+oBYB9wOpAPvKuqJ1T1KPBeUF0DRWS+iKwGbgcGmNenAXeZz+8CXo7k50sk0uw2wCGueA94GhgNdAm6Lg2UDQS/cwdd83Hyf66x4HjTgRtUdaWITDDbQlU/FZFcERkFpKrqmhbYnxQ4PbVDc/gz8Liqrq53fR5Gr4qIjAYOmD1wY8wDxolIGxHpAFwb9F4HYLc5X7693n2vYMzlnV66CZye2iFsVHUH8FwDbxUBL4vIKuAE8P0Q9SwXkRlAObAVmB/09i8x5utbgdUYIg/wF+BXBC3SOXwTcUIExz4vT8k5866q6jzgHKAPkAN0xPiHD/wMPE8DqoEq4Kj5M/B8H8bi01pgLUVVh6P7SVqHiIwHrlfVO+y2JZaxXdQi8gjwXYz5lh+4T1U/b6TsBOBDVd3VyjYrgWHm4k1M4Sp1dQK+hbGYdD5wXlevd/Ps7buGWdDcHgIChxXAbIqqtlnQTqsRkeeBq4FrVHWD3fbEMrYOv0VkJDAWGKKqbhE5Fcho4pYJwBogbFGLSJqqeltlqIW4Sl2pGFs63+bk1k9qcJlDqak1FjV/hvn41ldXirI3ArMwVrg/pqjqhEVtNwtV/ZHdNsQLds+pu2EsqrgBAj2niDyKsXjSBlgI3AfcCAwD/iIiNcBIjKHkMFU9ICLDgKdVdbSIFAFnYmzBHBCRH2HMw7oCiwlarRWRvwPdgSzgOVX9PxG5Bxioqj82y9wL9FfVn0TiQ7tKXSkYvc6dGN5ZpzRV3gdnHhc51k61fSTaD0Ef83EfUENR9mxgBvAWRVW1UWjfoZXYOvwWkfbAAqAt8DEwQ1XnikhnVT1klnkVeFNV/ykic4CfqupS871KGhf1tcAlqlojIr/H+PJ4XETGADOBruZ9nVX1kOkCuQQYBdQCq4A8Va0TkYUY04L6q77NwlXq6g7cA9yN8UUSNi/v3rtuWK373Na030oOYaw+/5Giqi9stMMhBLb21Kp6zPQuygcuA2aIyCSgWkT+C0PsnTHmfP9sZvXvqWpg2HophucSqlomIsELRA+KyDjzeXfgHFX9TERmA2NFpAJIb6mgXaWuNAxPqB8AV9HCbcQVmZmHh9W6Qxe0js7Aw8DDFGXPBf4IvE1RlcdOoxy+id3Db1TVh+ECOMf0IroPww1xmKpuN3vdrEZu93JSJPXLHK/fVP2bzT3Vy4GRqnrCHAkE6pmG4fL4BS3YF3WVugTD++pxoHdz769PeVZmHVWtrSVijDIf+yjKfhJ40RF37GCr84mI9BORc4IuDQLWm88PmMPz8UHvV/P1fctKYKj5/MYmmgp2jriak3PYbOCwKeg84MLADeYKfHeMlflm7Yu6Sl1jMfZg/0IEBA3wZUZ620jUE2FOA6YAGyjKvpOibMeZKQaw+4/QHigVkXWm48K5GI4ML2E4HvwdY54bYDpQIiLl5hz4MeA5EZmPsSXWGI8Bl4rIcuBKILBt828gzWz7CeCzeve9CXyqqmHt57pKXfmuUtcCjKnCeeHcEy4HUlNPi2R9EaYnUAqUU5Q91m5jkh3b96ljGTMIwBRVndVUOXMBbCpfd3eMLKq+ZZXbvRmQaVkbkWM+8J8UVTn+2TbgiLoBRKQTxtbXSlW9qbFy5rz5fuC3fH1aYAmv79zz5UCP55zQJWMCN/Ao8DRFVX67jUkm7B5+xySqekRV+4YQdHcMJ40XiYKgAVZkZcacB1wTZGJ82c2lKDsi6woO4eGIugW4Sl3fxdjHviya7a7IyozHFeZLgJUUZd9vtyHJgjP8bgauUlcGxv7sBDva71FXt6hsx+6RdrQdIf4NfI+iqoN2G5LIOD11mLhKXV0wvN4m2GXD3tTUrna1HSGuAhZTlG2nZ1zC44g6DFylrn4Y2135dtrhFunha3rrLh44G1hU+WjfK+02JFFxRB0CV6mrAFiEccjBXkQyNqenx+TRyOZQp6mHb/QUvZI7qewHdtuSiDiibgJXqesejHlgk6eookl5VsY+u21oDX7lyFjPr/0HyT4d+GPupLLH7bYp0XBE3QiuUtcPMPy/Yyq29IrMrLg9/qiK5966iZXrtUevoMu/zJ1UNsU2oxIQR9QN4Cp13Q78wW47GmJdZrrth3BaytPemxfP8g8d1MBbD+dOKvvfqBuUoDiiroer1HUDho95TP5udqWldQldKvZ43zd87lTfDZc0UaQod1LZQ1EzKIGJyX9cu3CVuq7AyEQRs71hjUgPbTxmdkzypf/MT39Y9+NRYRSdkjupbILV9iQ6jqhNXKWuSzBOhcX2gQmRttvT0uImOd0RbbdqjOfJcIMmCjAtd1LZd6y0KdFxRA24Sl09gH9gRFqJeVZmZeyx24Zw8Gjq1svck3M8pDfnizIVeD13UtmFIUs6NEjSi9p0/XwTI1xPXLA8M7N+VJeYw68cHuN5Ug/TsSW/1wxgRu6ksrj5m8QSSS9q4CngAruNaA5rMzNTQ5eyD1U899T9bNuXmpPbimp6AKW5k8oaytPl0ARJLWpXqWs88GDIgjHG9rS07NCl7KPYe9uST/yDz49AVWOBn0agnqQiaUXtKnWdA/zJbjtawrEU6WG3DY0x03fh3D/6rr04glX+JndSWSTrS3iSUtTmPPotjNxT8YdI9p7U1L12m1Gf9f6cTx+oezCcravmkAa8kTupLC735+0gKUUN/BwjT1XcsjozI6a2tQ5r+5VjPb8ZblH1OcDvLKo74Ug6UbtKXX2BR+y2o7Usz8o8ZrcNATyatuUy9+QedaQ1lQettdzlbHOFR9KJemCl/1Fi3cEkDFZnxsZH8KscvMpTnHKEDlafZBPghdxJZWH9z4qIzwwlHXjkNlDmX2aQyfrXi0QkbhfoYtYd0goq8vqP/yXctqmbf/6TN6cOqG4rcbsPujXd/hVwVdwT6v5r52Y9M6IxzptgKEb6opIwytaoakOHRxARwQjldU0kjYsVkqanrsjrnwU8JZDSZzf5Lz3n47Y5vvnEaZC2qpSUM+1sXxX9lfd7y+b5z4+WoAP8OndS2anNvUlEckWkQkReBJYD3UWk0kyfjIg8IiLrReRjoF/QffeKyBIRWSkib4tIWxHpICJbRCTdLNPRrCsmjukmjaiBn2CktgUgBTqPW6T505/xrcvbrhX2mdUyVKTr4ZSUQ3a1/57/orl/8l1zkQ1NdwaeDKNcm6Ch97vmtX7AK6o6WFW3BgqaSRpvBQZjJFIMXvB7R1WHq+r5GKmT71HVaoz8b2PMMrcCb6tqXWs+WKRIClFX5PVvTyNODG09DHjsNV+/X5V657ev0SNRNq1VrMnM2GFHuxX+HgseqntgtB1tm9yVO6ksVCzxGlUdZD4CWU23qmr91EpgxJ57V1VPqOpR4L2g9waKyHwzeePtwADz+jTgroA9tCCJolUkhagxckI3upAjkNJ3F/nTnvX5bp7nWxAvQ/LlWZlRz4N5UDusuNbzK7vdalOBX7TgvqZ85hv7m08HHlBVF0ZOtiwAVf0UyBWRUUCqqsZMiqGEF3VFXv9U4MfhlE2BLuM/1UtenuJb03eHxnxi9ZWZmVH98nFr2uYC9+ReXtJiYe54Z+6ksu4RqmseME5E2ohIB76eE60DsNucL99e775XMDKixkwvDUkgauAmjKyMYdPOjeuJV33nPPaqd167Go2drND12JKe3i5abflVDlzlKU6rov03toBsIh14OBIVqepyYAZG+uG3MRL8Bfgl8DnwEUau8mD+gjECbFaqY6tJ+AwdFXn9l3Iyh3Wz8Qv737okZcPbF8tFGFshMUOq6u7yyu3drG5Hldo76n7x5QK/y2V1W82kCsipLB5jiyOOiIwHrlfVO+xovzESuqeuyOt/Ga0QNECK0vWW+f6L/zzFt7rPTl0fIdMigk+k2zGRaivbUEUf996xIgYFDZDNycWqqCIizwPFGHnNY4qIO5+ISJOhaFT1nUi32QQ/iVRF7d2c9+tXfL6K7sz73fjU809kie3OHwDrMjO2j6h1W5bG5h1//tyXfVePtqr+CHA/8Hy0G1XVH0W7zXCJ+PBbRJpaNFBVvTuiDTZCRV7/zsBeLPji8gv73rg05cu/X5Ri+5HABw4fWXDfkaNNRelsMWv8ufPHen5ja6qhMHFVFo+JmdVnu4n4P7yq2jIcaoDrsMgNNkU57btz/add+7l/5a9vTW27uZvYlgi+PDPTktxaB7Tj8hs8j8fLAYqbAEfUJpb6fovIGIzN+qzANVWNVpqVG61uoEMt5z853edd21PmPnVjypCaTIlK8vlgNmakt4l0nbWavuky9+TeMbJ1FQ43AU4yABPLFspEpAS4BfgRxgmbZm8ttZSKvP4dgCui0ZZA2sCtOurlKb4T137mXxiNNoM5kJp6RiTr86vs/7bnt5nVtIuJNYMw6Z87qSwWF/JswcrV74tU9U7gsKo+BowEIuUsEIqxRPl4ZYpy+h2f+C+a9qy3PHePbopWu17IcQsRya+lSs336n6xb6uekROJ+qLMTXYbECtYKeoa8+cJETkTqAN6NVE+klg+9G6MjjUM+u3Lvh6PvOGbm+VR6/dPRVLWZ2RsDV2waVTRR70TVi70DxwQunRMcrPdBsQKVop6pnkA/SmMo26VGCltLMU8Ynm11e00hUD6+Vt01MvP+KqvWexfZHV7KzIzD7a2jjd9o+a+6rsyXhbGGqJf7qSyeBxhRBwrRf07VT2iqm9jzKXzgF9Z2F6AwcRIpo1UpduEWf6RLz3nXd5jn262qp0VWZme1ty/0n/2/J977xsdIXPsJJ6/lCKGlaL+qodSVbeqVgVfs5Bw8zZFjewTDHnqT77uv5jhm5vp0Yhn19iQkZ4VulTD7NfsZd/xPDYykvbYiCNqLBC1iJxhHjpvIyKDRWSI+RhNdHrQmBM1GEPywZt11PRnfEevWupv6Exvi9mbmta1JffVavrGy9yTz/GRmihhrRLly6lVWOFR9n1gAoa4lga9VQ1Mt9pNtCKv/1rAMrfJSHGkHcsevy21846u0vrFQ9W6FZXbJa0Zfgc+lX2XeZ7xbNPTE2keWgt0rCweExMRSOzCslNaInKjOZ+OGhV5/dsBR4mTgyoKnmV9ZNGzN6QM96RLq0Yxf9uxe3O/urqzw2pXOXGr538qP9dzY/7LrwWMqCwes8RuI+zEyn/+WSLyjIgsNR+TRSw/BDGYOBE0gEDGsI06qnSy7/AVy/2ft6au8qzM/eGUU8X/iPfuVQkqaIizZIdWEG4M5UdEZK2IrDIDuYXzi/sTxpD7ZvNxlKAIERbFVm7VMUu7SFXOuvcD/wUlz3uXnnVAW7TnvDwrMywHlNd9BfP/6rs8kReU+thtgN2EnIOJyEgMD60hquo2Q6qGk4mht6oGO4E8JiLlLbQzXPIsrt9SOh9j2DMv+dyL+8rc569LGeFJl7D9ur/IyAj5t1zu7zPvv73/EelcV7HGWXYbYDfh9NTdgAOq6gZQ1QOquqtezORhIjLHfF4kIn8GeonIThF50Lx+MdDZ4tjKcf8HFci8YIOOmv6M72BBuX9xuPftTkttMhb2Xu20dLynyPajolEgkRb+WkQ4ov4QI/D5BhF50YyeGIo84FvAYWCKiFRiDMfdWBtbOe5FHSDNT8797/tH/OEF75JuB3VbqPI1Ij384G/wPc3YUOCe3M9PSkwnq48QjqhDFVDVY5xMd7IfmCEiE0LcVgYcVNWBwEbgKoxUKe9bHFvZ1qwVVtClmuHP/p/vtJ+845ub7tXG580ibbalpX0jE6ZPZe8VnqfaH6dN1I+F2sQZ4ebbSlTC+vCq6lPVOar6v8ADGAcmvEH31/docmNEZQTjIEfgn3F8I01MJzKxlRMyh7FA1oXrdVTpZN++Uav9jW7XrMzK3BP8WpXjt3gePbRDuybcl10TpAERPY4ab4QUtYj0E/laZI9BwFaMAxqB1ebgBbFTAReQbcYr6wh8GyNIXGerYiube9Txcqi/RaT56VE40z986lTv4tMP6TeycyzPyjwReK6K/+fee9cu1X79o2tlTJAw07CWEE5P3R4oFZF1IrIKw1urCKNHfU5E5gPBIXW6AP2BThjC7QBcbl4vxbrYylanUo0Zuh5lxO//6Ovy0N99c9O8xgImwNqMjK/mzK/5Lp//pu+yEfZYaDtRi4cei1jpUTZSVRs9wCEiv1DVkInOwo2tXJHXvz+wrvmWxjfeFLa+ODZl/4IBKcPa+f1rP9u6Y8ASf995N3mKLrXbNhu5orJ4zMd2G2EXli0oNCVok5CRKpoZWzkp/X3T/PR88D3/sBde9H7e8TDpu7Xz4ls8jybD1lVTJPQ0LBR2ns4Jme2imbGV3aGLJC7tPad1m7Dwqi8qevTy/COj4yq77bGT3ajXbhvsxE5RR3rcn3Si9kuae3vOqGXbul/Rpi69/SCvZ+3eqj3/yDmn+w8zRaSz3fbZxSlhdBiJTEz31M0kIsH34oGjHXpu2Nh73J4j2X1ciHyV+N3nXlV7wlfdbcmB9xeP6HpNsi6SQZJOxQJYJmoRudjcZ27s2lsRbjKhe2pvamb11h7fLt9x1qguvrSsc4G+9cuob28fgC3HVo/IbT9w7mlteiS6n3djJLWorVz9Xq6qQ0JdiyQVef39JNjQ62Dnc1dvOvv6qmPtzhqMSKNbNX7vrvWe6je+8qdPIdU9rueDlWkpGf0auyeBOS+nOH+13UbYhRUJ8kYCFwFdRSQ4QV1HwGrfYzff9G6LOzzpHQ5s7jV27e4zLuiuKelhBan31q7YQ9AhGT++zI92vZpx1Vl3H5cmvgwSlJC+8omMFcPvDAyHlTQMx5MAR2ncTTRS7CZ6scUjiiL+vacNW7651xhvbdapQwnv4MxX+Ou2fOOU1tG6A73WHFmwwHVKviUJ9GKUoznF+VV2G2EnViTImwvMFZHpqi078N8KviTORF2TdeqOjb1v2Lj/1PP6IqktCpqo/uP7wdNgJJN1RxZe0qNd/0+zM05Nlr3raP/PxRxWDL+fVdWHgRdE5BsTdlW9LtJtBvElcKWF9UcEv6R6dp6Zv2xrz29netI7DEKkVccFfe5V64FGI4rO2vWq64aeD25LkdQerWknTkjqoTdYM/x+xfz5tAV1h+JLG9oMm+r23Tdu7D1u5+FO5wxEUiIWztbnWdfk37FOPR3n7Jmx47IzbqsLEWQiEXBEbUGdT2EESLhGVX9uQf1NEXOi9qZmHtvW/Yry7TmjO/nS2gwkwjG0VH0e9VcNDFVuf+32c7ccWzXn7A7nj45k+zGIM/y2oM5u5vnn60TkDeptManqcgvaDBAzoj7Uqd+aTb1vOFLdvvsgRCxbqPLXbVwDhLVNuOTAv0d1a9N7aZu09jGZ8CBCVNptgN1YIepHgUkYYWWeqfeeAgUWtBlgC0bwBls85Tzp7Q5tyR27evcZF57lT80I2XtGAq+7vDmZNeXDXdN7Xtf9P/eLpLQoq0cckNQxv8Fa55Nfqmo4p6siSkVe/1UYQRqigoLu6zpkxeZe17pr2nQdikg4kVYjRu3hZ7eBv1kLYN3b5S0b2fW6ISKSUI46wM6c4vykj1FmWY+mqk+IyHVA4FzvHFWdaVV7QcwmCqKuyey8e9PZ12/Y33Vwb01JtcxLrin83n2bwN+7ufdtP/7F0F7tXXO7tT070dxI54cukvhY6fv9JDACI3IJwEOm7/cvrGrTZBbwkBUV+yWlble3i5dV9rwqzZORPQSRbla0Ey4+d/kOoNmiBpi/9+2LxvV8cG16Sma8JplvCEfUWDv3HAMMUlU/gIiUAisAq0U9hwjPq4+1O3Pzxt7jth86Je9cJCVmslv46ja2OIST4k//aGdph6tz7j0qIh0jaZeNOKLG+gWlTsAh87nVebQA6P9FRXVFXv8ltDKtqS8l48S27gUrtud8q6M3va0LCCv5XLRQf80RtLZVvWy193CPlYc+WTioS8FFoUvHPIeBUNFmkwIrRf0bYIWIfIKxrXUp1vfSAT6mhaI+nN1n3abe4w4e7dDzfIysIjGJz7N2HcbBmVax/uiSi3q2H7DglMzT490/fEFOcb41q75xhiWiFpEUjGwRF2Jk4hDg56q6p8kbI8csjAilYVGX1vbIltxrVu3qdvEZ/tSMuMgG6XNHrlOatfsvg8f1fHBzqqTF1GikmbxvtwGxgiWiVlW/iDygqm/y9Uwc0WIRUEUTQ34F3X/qoPLNva6tOdH29CGIxE30TVW/V/2HIvbl49O6drN3/7Xu8m53uEUkM1L1RhEPMMNuI2IFS/epgRqMX/bxwHVVPdToTRGkIq//NOCe+tdrMzvt2dTr+vX7ThvSS1PS4vKAg8+zaWXd8X+cH+l6B3f+1ry+2cPi5sstiHdzivO/Y7cRsYKVc+q7MTzI/rPe9WgN8V7BFLVfUry7zxi5vLLn1eLO7DQEkbhOy+Jzlx+xot4Vh2Zdela7vovbpXWMt/hmr4QukjxYKepzMQR9CYa452MkyYsW84+1O3PBprOv9x3sfG5/JCXe/lEbxe/d0d2quj/cOb3P9T0e2J0iKbbuwTeDgxgJGR1MrMwOWIqRfuf3wPPm81IL2/sa/b+o0MXDH/n3wS4DRyEpp0WrXavx+w5tBZ9lox2Pv6bzp/ve3RvwL4gDXs8pzk/qQIP1sVLU/VT1P1T1E/PxA4JiaEWJaSRYZEmfu9zyo4W7TmwctPPEhnlWtxMhnKF3PawU9QoR+cr7SkQuAD5tonzEKSwp2Au8E802rcbn2dA+Gu0s3PePfI+vJtYzfazMKc5P+lNZ9bFS1BcAC0WkUkQqMbaZRonIajN7ZrR4LoptWYqquxo9EZUjnYqmfrirtIuqWrIoFyFCJlhMRqwU9VUYQQBHmY9ewDXAWL6em9pSCksKFpEgCyk+d8VajGitUeG4t+qsZQc/rJ9aOFZYTwMJIURkiog8HPT6AxGZFvR6cr3Q1Q0iIrkiYqnbqYg05yx82FiZ9XJrUw+r2m2ER4h87q6o4/Osjnrit03V5RceqN0Zi/PrJ3OK8xtazFuI6T5rejaeCgT7yF9ElKeB0cbKnjpmKCwpWAm8YbcdrUFV/erbb0u2jU/2vD7C66+LmVBRwBfAa4289yknfeIHYBzyqBaRU0xvuf4AIjJXRJaZPXk389pQEVkpIouAwkCFIjJBRN4RkX+LyJci8rug964UkUUislxE3hKR9ub1YhFZJyKrRORp81ovs+wSEXkiqI72IjLLrGO1iFxvXn9CRB4KKvdrEXkw1C8nKURt8ijGkcy4xO/dVkETYYAtbVt9WbN2v5aiqjV2tN8Aj+QU5/saekNVdwFeEemBIe5FwOcYB3yGARXAFGC8qg4F/gz82rz9ZeBBVW3oMNAg4BaMABy3iEh3ETkV+B/gcjOd1FLgJ2bG0XHAAFU9D/iVWcdzwB9UdTgQfA6iFhhn1nEZMNmMSvMn4Pvw1ajjVk7GJ2iUpBF1YUnBRoxfUlzic5cfsLP9I559vSuqPltqpw0mi3OK80PtaAR664CoFwW93gkMBD4SkXIMUeaISDbQyUxGAfBqvTpnqWqVqtYC64CeGAeWzgU+Nev6vnn9KIZQp4nId4ATZh0XA683UL8AvzEXkD8GzgJOV9VK4KCIDMaIZ79CVQ+G+gXZmcrWDh4H7gTa2G1Ic/HXbbXdw2v14Xn53dvlLeqQfkrEYpY3Ez/wcMhSJ+fVLozh93ZgIobYZgNn1e+NRaQTTa+7BGdV9WFoR4CPVPW2+oVFZARGqOxbgQc4GXCzoTZuxxiFDVXVOnO3KJATbhowATgDY1QRkqTpqQEKSwp2YQzD4wr1Hd0N3m+krrWDj3aVnutX3w6bmn82pzh/URjlPsXYZTmkqj7zEFEnjCH4DIzkjSMBRCRdRAaYW3dVcjKc8+1htPMZcLGI9DHraisifc15dbaq/gvjS2hQkF23NlB/NrDPFPRlGL19gHcxdpKGAx+EYVNyidrkGeIs7I3XXb7RbhsC1Pnd2fP2/O2wqkZ7fWIDxlA5HFZjrHp/Vu9alaruw0jU+FsRWQmUc3Jh7S5gqrlQFnL9QFX3Y/Sir5tD58+APIzEkDPNa3OBH5u3PAQUisgSvn4s+C/AMBFZiiH2r7YRVdUDfAK8qaoNriPUx7Kjl7HM1Ptnnw2sAuIixWvtkf9bgh4bbrcdwVzQdeyc3PYDRkepOT+Qn1OcvzBK7cUM5gLZcuAmVQ1rByIZe2oKSwo2Az+1245wUK2rQY9FxYusOXy+f+altb4TK6LU3LNJKuhzgY0Yi3RhbykmpagBCksKSghzjmInPs+GNcTmwl7KhzundwtnNbaVNGfYnVCo6jpVPVtVJzbnvqQVtck9QCz7NuNzr3SFutkAAAhQSURBVKy124bGqPFVn7H4wL82q3VzuDpgQk5xfqzsj8cFSS3qwpKCnRgLE2EtQNiB+vZGNEtmpKk8tmb4vtptVrmR3hfmardDEEktaoDCkoJ/ASFd7+zA7921HtT2/elQzNvz5sg6v6ciwtX+Nqc4/+UI15kUJL2oAQpLCl7kmxk6bcdbuyJaIZVbhR9/xse7XmmjqpE6dfQ20YsRn3A4oj7Jz4ixgAr+ui2n2m1DuBytO5i75sj88ghUtQS4wwnM33IcUZsUlhT4ge9hOP/bjvqP7wdPXCQWCLDuyKJLqjwHWnOscRtwnbMw1jocUQdRWFJQA1wHbLLbFp971XoM3+K44uNdr57nU19LzsvvA8bkFOfHxZQjlnFEXY/CkoJ9GHm/Ir3w0yx8nnVxedjGq54Oc/e8cVxVmxPwcStwSU5xvpPgLgI4om4A8+DHKGClHe2r+jzqr4rbvNH7a3ecu7l6ZbgeYBUYgo6lIAxxjSPqRigsKdiPcWB9QbTb9tdtXINxKCBuWXrwg0trvNWhzl8vxfDptuvUV0JiiahFpIuIlJuPPSKy03x+RETWWdFmvfYniMgLra2nsKTgMHAF8LfWWxU+XvdKSwLSRRn5cFdpT1X/vkbe/wQoyCnOt9rNNOmwRNSqelBVB6nqIIxUO1PM54MwTty0CBGJ+jyzsKSgFiOMTdT2sdW7KzdabVlJre9410X7/7m9ATfSvwFX5xTnV9thV6Jjx/A7VUReEpG1IvKhiLQBEJE5IjLMfH6qGf0h0Ou+JSL/BD4UkW4iMs/s+deISL5Z7i4R2SAiczHCxmBev1ZEPheRFSLysYicLiIpZgC5rmaZFBHZaMac+gaFJQX+wpKCicCNwGELfzf4vfs2gT8us3E2xPbjXwzdXbM5ECKoDpiYU5x/U05xvrup+xxajh2iPgeYqqoDMA5T3BjGPSOB76tqAfBd4AOz5z8fKDejQT6GIeYrMOJGBVgAXKiqgzEiiv6XmSfqNU5Gn7gcWKmqTcYBKywpeAdjtGFZiFmfuzzh5pcL9r59SY332CfA6Jzi/Jjz3Es07BD1FlUNeB4tA3LDuOejoLzWS4C7RKQIcKlqNUY2kDmqut+MFBGcgDwH+EBEVmN4jQVWlf+MEa8MjLS7YfkZF5YUbMNYGX+CVkwlGsNXt/GUSNdpN4q++972qeOT8Uy0Hdgh6oYCuIERvjdgTxZfJzhp/TyMfeSdwKsiEhBmY26FzwMvqKoLuC9Qt6puB/aKSAHGl8L74X6AwpICX2FJwaMYgeV2hntfKNRfcwStjdutrAY4Ctw5ccbMmyfOmHkoZGmHiBBLW1qVwFDz+fjGColIT4wgbS9hhPwdguHaOdpcdU8Hbgq6JZuTwvt+veqmYQzDw47/FExhScEcjIiVzxGB7Jo+z9p1QGpr64kBFCPu1oCJM2bWD7XrYDGx5LX0NPCmiNyBEca1MUYDPxOROuAYcKeq7jaH44uA3RgxnQLiKALeEpGdGIHhegXV9R7GsLvFR/zMba+Hp94/+w/mZxjb0rp87oRwqFoI/HjijJmL7TYkWUnKwIMBzNX2KaqaH6k6p94/+3KM7S9Xc+5T9fvcR56txghlG49sBX4+ccbMGSFLOlhKLA2/o4qITMKCc7uFJQUfA4OB+4Fd4d7nr6tcS3wK+gjw30CeI+jYIKl7aquZev/sdOA7wI8I2jtvCE/1O3P93spRUTEsMqwBXgBemzhj5vFQhR2ihyPqKDH1/tmDMcIm3co3V/epPfzcJvD1jrphzcMH/B14YeKMmXNstsWhERxRR5mp988+FbgXY488D8DvO7TNc3R6LHuRVQJ/BUomzpi53WZbHELgiNpGpt4/Ow8YV3dibp7Pvex7xM4ahxdjFbsMKJs4Y+Zam+1xaAaOqGOEybeM7YLh4nolkA+cTXRFvgtjK7EM+GDijJmW+rg7WIcj6hhl8i1j22K4tLrqPU5rZdVHMbJerAfWAiuAFRNnzNzbynodYgRH1HHG5FvGdgY6Y2x/ZTfwAKjCEO/Res8PTpwxs7HzzQ4JgiPqJEdEugCzzJdnYKxw7zdfjzAPyESindHAT1W1xR53DuERS26iDjZgJrgbBGC62h5T1adtNcqhVcTKaqtDDCEi00VkfNDrY0HPfyYiS0RklYg8Zl5rJyJlIrLSDFxxi3n9KhH5QkQWYDjhBOoYISILzcAVC0Wkn3l9vogMCir3qYicF4WPnFA4PbVD2IjIlRhBLkZgxCR/T0QuBboCu1R1jFkuW0SygJeAAowcy8EupF8Al6qqV0QuB36DESxjGjABeFhE+gKZqroqKh8ugXB6aofmcKX5WIFxEi4PQ+SrgctF5Lcikq+qVeZ7W1T1SzNG2WtB9WRjnJxbA0zhZOCKt4Cx5vHZu4HpUfhMCYfTUzs0xFcBK0REgAzzugBPquof698gIkOBa4AnReRDjGOtja3CPgF8oqrjRCQXmAOgqidE5CPgeuBmYFiEPk9S4fTUDg1RycmAFdcD6ebzD4C7RaQ9gIicJSKniciZwAlVfQ3jTPkQjCF2LxEJ+LPfFlR/cOCKCfXangb8HlgSFMLKoRk4PbVDQ7wE/ENEFmNsdx0HUNUPRaQ/sMjowDmGkVSwD/CUiPgxIsD8UFVrReQHQJmIHMAIADnQrP93QKmI/IR6ATFUdZmIHKUVgSuSHWef2iGmMHv9OUCeGfXVoZk4w2+HmMEMIvk58Igj6Jbj9NQODgmG01M7OCQYjqgdHBIMR9QODgmGI2oHhwTDEbWDQ4LhiNrBIcFwRO3gkGA4onZwSDAcUTs4JBiOqB0cEgxH1A4OCYYjageHBOP/ATAhy1q0UkEpAAAAAElFTkSuQmCC\n",
      "text/plain": [
       "<Figure size 576x216 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# дни недели не влияют на убыточность рейсов.\n",
    "avia_fail.groupby('day_of_week_departure')['profit_total'].agg('mean').plot.pie(subplots=True,figsize=(8, 3))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 301,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 363 entries, 0 to 362\n",
      "Data columns (total 6 columns):\n",
      " #   Column             Non-Null Count  Dtype  \n",
      "---  ------             --------------  -----  \n",
      " 0   flight_id          363 non-null    int64  \n",
      " 1   tickets_cost       354 non-null    float64\n",
      " 2   total_ticket_sale  354 non-null    float64\n",
      " 3   flight_duration    363 non-null    float64\n",
      " 4   fuel_expense       363 non-null    float64\n",
      " 5   profit_total       354 non-null    float64\n",
      "dtypes: float64(5), int64(1)\n",
      "memory usage: 17.1 KB\n"
     ]
    }
   ],
   "source": [
    "# для удобства анализа создадим датафраем только с числами\n",
    "avia_df = avia.select_dtypes(include = ['float64', 'int64'])\n",
    "avia_df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 302,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count    3.540000e+02\n",
       "mean     2.801791e+05\n",
       "std      3.749708e+05\n",
       "min     -1.386000e+05\n",
       "25%     -2.407917e+04\n",
       "50%      1.682208e+05\n",
       "75%      4.312458e+05\n",
       "max      1.201000e+06\n",
       "Name: profit_total, dtype: float64"
      ]
     },
     "execution_count": 302,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Посмотрим распределение ключевого параметра\n",
    "avia_df.profit_total.hist()\n",
    "avia_df.profit_total.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 303,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "plane_model\n",
       "Boeing 737-300         382125.423729\n",
       "Sukhoi Superjet-100    178232.697740\n",
       "Name: profit_total, dtype: float64"
      ]
     },
     "execution_count": 303,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Прибыль в зависимости от модели самолет\n",
    "avia.groupby('plane_model')['profit_total'].agg('mean')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 304,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "city\n",
       "Belgorod        178232.697740\n",
       "Moscow          382125.423729\n",
       "Novokuznetsk              NaN\n",
       "Name: profit_total, dtype: float64"
      ]
     },
     "execution_count": 304,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Прибыль в зависимости от города прилета \n",
    "avia.groupby('city')['profit_total'].agg('mean')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 305,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([<matplotlib.axes._subplots.AxesSubplot object at 0x11abcaaf0>],\n",
       "      dtype=object)"
      ]
     },
     "execution_count": 305,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 576x216 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Тут мы видим, что рейсы в Москву приносят больше прибыли чем в Белград\n",
    "avia.groupby('city')['profit_total'].agg('mean').plot.pie(subplots=True,figsize=(8, 3))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 315,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Переведем все негативные числа в avia_fail в позитивные для графиков, но помним что они отрицательные\n",
    "avia_fail_pos = avia_fail"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 316,
   "metadata": {},
   "outputs": [],
   "source": [
    "avia_fail_pos.profit_total = avia_fail_pos.profit_total.abs()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 318,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>flight_id</th>\n",
       "      <th>airport_departure</th>\n",
       "      <th>airport_arrival</th>\n",
       "      <th>city</th>\n",
       "      <th>plane_model</th>\n",
       "      <th>time_departure</th>\n",
       "      <th>time_arrival</th>\n",
       "      <th>tickets_cost</th>\n",
       "      <th>total_ticket_sale</th>\n",
       "      <th>flight_duration</th>\n",
       "      <th>fuel_expense</th>\n",
       "      <th>profit_total</th>\n",
       "      <th>day_of_week_departure</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>59</th>\n",
       "      <td>136119</td>\n",
       "      <td>AAQ</td>\n",
       "      <td>SVO</td>\n",
       "      <td>Moscow</td>\n",
       "      <td>Boeing 737-300</td>\n",
       "      <td>2017-01-03 10:05:00+00:00</td>\n",
       "      <td>2017-01-03T11:45:00Z</td>\n",
       "      <td>13400.0</td>\n",
       "      <td>67000.0</td>\n",
       "      <td>1.666667</td>\n",
       "      <td>165400.000000</td>\n",
       "      <td>98400.000000</td>\n",
       "      <td>Tuesday</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>60</th>\n",
       "      <td>136120</td>\n",
       "      <td>AAQ</td>\n",
       "      <td>SVO</td>\n",
       "      <td>Moscow</td>\n",
       "      <td>Boeing 737-300</td>\n",
       "      <td>2017-02-24 10:05:00+00:00</td>\n",
       "      <td>2017-02-24T11:45:00Z</td>\n",
       "      <td>13400.0</td>\n",
       "      <td>80400.0</td>\n",
       "      <td>1.666667</td>\n",
       "      <td>165400.000000</td>\n",
       "      <td>85000.000000</td>\n",
       "      <td>Friday</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>61</th>\n",
       "      <td>136122</td>\n",
       "      <td>AAQ</td>\n",
       "      <td>SVO</td>\n",
       "      <td>Moscow</td>\n",
       "      <td>Boeing 737-300</td>\n",
       "      <td>2017-01-08 10:05:00+00:00</td>\n",
       "      <td>2017-01-08T11:45:00Z</td>\n",
       "      <td>13400.0</td>\n",
       "      <td>40200.0</td>\n",
       "      <td>1.666667</td>\n",
       "      <td>165400.000000</td>\n",
       "      <td>125200.000000</td>\n",
       "      <td>Sunday</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>62</th>\n",
       "      <td>136130</td>\n",
       "      <td>AAQ</td>\n",
       "      <td>SVO</td>\n",
       "      <td>Moscow</td>\n",
       "      <td>Boeing 737-300</td>\n",
       "      <td>2017-02-13 10:05:00+00:00</td>\n",
       "      <td>2017-02-13T11:45:00Z</td>\n",
       "      <td>13400.0</td>\n",
       "      <td>80400.0</td>\n",
       "      <td>1.666667</td>\n",
       "      <td>165400.000000</td>\n",
       "      <td>85000.000000</td>\n",
       "      <td>Monday</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>63</th>\n",
       "      <td>136131</td>\n",
       "      <td>AAQ</td>\n",
       "      <td>SVO</td>\n",
       "      <td>Moscow</td>\n",
       "      <td>Boeing 737-300</td>\n",
       "      <td>2017-01-28 10:05:00+00:00</td>\n",
       "      <td>2017-01-28T11:45:00Z</td>\n",
       "      <td>13400.0</td>\n",
       "      <td>80400.0</td>\n",
       "      <td>1.666667</td>\n",
       "      <td>165400.000000</td>\n",
       "      <td>85000.000000</td>\n",
       "      <td>Saturday</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>299</th>\n",
       "      <td>136936</td>\n",
       "      <td>AAQ</td>\n",
       "      <td>EGO</td>\n",
       "      <td>Belgorod</td>\n",
       "      <td>Sukhoi Superjet-100</td>\n",
       "      <td>2017-01-02 09:25:00+00:00</td>\n",
       "      <td>2017-01-02T10:15:00Z</td>\n",
       "      <td>6900.0</td>\n",
       "      <td>27600.0</td>\n",
       "      <td>0.833333</td>\n",
       "      <td>58579.166667</td>\n",
       "      <td>30979.166667</td>\n",
       "      <td>Monday</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>300</th>\n",
       "      <td>136937</td>\n",
       "      <td>AAQ</td>\n",
       "      <td>EGO</td>\n",
       "      <td>Belgorod</td>\n",
       "      <td>Sukhoi Superjet-100</td>\n",
       "      <td>2017-01-03 09:25:00+00:00</td>\n",
       "      <td>2017-01-03T10:15:00Z</td>\n",
       "      <td>6900.0</td>\n",
       "      <td>27600.0</td>\n",
       "      <td>0.833333</td>\n",
       "      <td>58579.166667</td>\n",
       "      <td>30979.166667</td>\n",
       "      <td>Tuesday</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>301</th>\n",
       "      <td>136951</td>\n",
       "      <td>AAQ</td>\n",
       "      <td>EGO</td>\n",
       "      <td>Belgorod</td>\n",
       "      <td>Sukhoi Superjet-100</td>\n",
       "      <td>2017-02-02 09:25:00+00:00</td>\n",
       "      <td>2017-02-02T10:15:00Z</td>\n",
       "      <td>6900.0</td>\n",
       "      <td>27600.0</td>\n",
       "      <td>0.833333</td>\n",
       "      <td>58579.166667</td>\n",
       "      <td>30979.166667</td>\n",
       "      <td>Thursday</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>302</th>\n",
       "      <td>136953</td>\n",
       "      <td>AAQ</td>\n",
       "      <td>EGO</td>\n",
       "      <td>Belgorod</td>\n",
       "      <td>Sukhoi Superjet-100</td>\n",
       "      <td>2017-02-27 09:25:00+00:00</td>\n",
       "      <td>2017-02-27T10:15:00Z</td>\n",
       "      <td>6900.0</td>\n",
       "      <td>34500.0</td>\n",
       "      <td>0.833333</td>\n",
       "      <td>58579.166667</td>\n",
       "      <td>24079.166667</td>\n",
       "      <td>Monday</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>303</th>\n",
       "      <td>136956</td>\n",
       "      <td>AAQ</td>\n",
       "      <td>EGO</td>\n",
       "      <td>Belgorod</td>\n",
       "      <td>Sukhoi Superjet-100</td>\n",
       "      <td>2017-02-04 09:25:00+00:00</td>\n",
       "      <td>2017-02-04T10:15:00Z</td>\n",
       "      <td>6900.0</td>\n",
       "      <td>34500.0</td>\n",
       "      <td>0.833333</td>\n",
       "      <td>58579.166667</td>\n",
       "      <td>24079.166667</td>\n",
       "      <td>Saturday</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>118 rows × 13 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     flight_id airport_departure airport_arrival      city  \\\n",
       "59      136119               AAQ             SVO    Moscow   \n",
       "60      136120               AAQ             SVO    Moscow   \n",
       "61      136122               AAQ             SVO    Moscow   \n",
       "62      136130               AAQ             SVO    Moscow   \n",
       "63      136131               AAQ             SVO    Moscow   \n",
       "..         ...               ...             ...       ...   \n",
       "299     136936               AAQ             EGO  Belgorod   \n",
       "300     136937               AAQ             EGO  Belgorod   \n",
       "301     136951               AAQ             EGO  Belgorod   \n",
       "302     136953               AAQ             EGO  Belgorod   \n",
       "303     136956               AAQ             EGO  Belgorod   \n",
       "\n",
       "             plane_model            time_departure          time_arrival  \\\n",
       "59        Boeing 737-300 2017-01-03 10:05:00+00:00  2017-01-03T11:45:00Z   \n",
       "60        Boeing 737-300 2017-02-24 10:05:00+00:00  2017-02-24T11:45:00Z   \n",
       "61        Boeing 737-300 2017-01-08 10:05:00+00:00  2017-01-08T11:45:00Z   \n",
       "62        Boeing 737-300 2017-02-13 10:05:00+00:00  2017-02-13T11:45:00Z   \n",
       "63        Boeing 737-300 2017-01-28 10:05:00+00:00  2017-01-28T11:45:00Z   \n",
       "..                   ...                       ...                   ...   \n",
       "299  Sukhoi Superjet-100 2017-01-02 09:25:00+00:00  2017-01-02T10:15:00Z   \n",
       "300  Sukhoi Superjet-100 2017-01-03 09:25:00+00:00  2017-01-03T10:15:00Z   \n",
       "301  Sukhoi Superjet-100 2017-02-02 09:25:00+00:00  2017-02-02T10:15:00Z   \n",
       "302  Sukhoi Superjet-100 2017-02-27 09:25:00+00:00  2017-02-27T10:15:00Z   \n",
       "303  Sukhoi Superjet-100 2017-02-04 09:25:00+00:00  2017-02-04T10:15:00Z   \n",
       "\n",
       "     tickets_cost  total_ticket_sale  flight_duration   fuel_expense  \\\n",
       "59        13400.0            67000.0         1.666667  165400.000000   \n",
       "60        13400.0            80400.0         1.666667  165400.000000   \n",
       "61        13400.0            40200.0         1.666667  165400.000000   \n",
       "62        13400.0            80400.0         1.666667  165400.000000   \n",
       "63        13400.0            80400.0         1.666667  165400.000000   \n",
       "..            ...                ...              ...            ...   \n",
       "299        6900.0            27600.0         0.833333   58579.166667   \n",
       "300        6900.0            27600.0         0.833333   58579.166667   \n",
       "301        6900.0            27600.0         0.833333   58579.166667   \n",
       "302        6900.0            34500.0         0.833333   58579.166667   \n",
       "303        6900.0            34500.0         0.833333   58579.166667   \n",
       "\n",
       "      profit_total day_of_week_departure  \n",
       "59    98400.000000               Tuesday  \n",
       "60    85000.000000                Friday  \n",
       "61   125200.000000                Sunday  \n",
       "62    85000.000000                Monday  \n",
       "63    85000.000000              Saturday  \n",
       "..             ...                   ...  \n",
       "299   30979.166667                Monday  \n",
       "300   30979.166667               Tuesday  \n",
       "301   30979.166667              Thursday  \n",
       "302   24079.166667                Monday  \n",
       "303   24079.166667              Saturday  \n",
       "\n",
       "[118 rows x 13 columns]"
      ]
     },
     "execution_count": 318,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "avia_fail_pos"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 319,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([<matplotlib.axes._subplots.AxesSubplot object at 0x11a98f370>],\n",
       "      dtype=object)"
      ]
     },
     "execution_count": 319,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 576x216 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Тут мы видим, что рейсы в Москву также приносят больше убытков чем в Белград\n",
    "avia_fail_pos.groupby('city')['profit_total'].agg('mean').plot.pie(subplots=True,figsize=(8, 3))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 320,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "city\n",
       "Belgorod    26301.200565\n",
       "Moscow      97037.288136\n",
       "Name: profit_total, dtype: float64"
      ]
     },
     "execution_count": 320,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Убытки в зависимости от города прилета \n",
    "avia_fail.groupby('city')['profit_total'].agg('mean')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Следующее, посмотрим коррелицию между числовыми переменными, как видим profit_total не имеет высокой корреляции между параметрамерами, поэтому все годятся для анализа. flight_duration и fuel_expense  зависимы, так что можно выбрать один."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 321,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>flight_id</th>\n",
       "      <th>tickets_cost</th>\n",
       "      <th>total_ticket_sale</th>\n",
       "      <th>flight_duration</th>\n",
       "      <th>fuel_expense</th>\n",
       "      <th>profit_total</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>flight_id</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.440494</td>\n",
       "      <td>-0.354002</td>\n",
       "      <td>-0.510324</td>\n",
       "      <td>-0.587605</td>\n",
       "      <td>-0.242566</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>tickets_cost</th>\n",
       "      <td>-0.440494</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.014287</td>\n",
       "      <td>0.489426</td>\n",
       "      <td>0.489426</td>\n",
       "      <td>-0.084783</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>total_ticket_sale</th>\n",
       "      <td>-0.354002</td>\n",
       "      <td>-0.014287</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.395952</td>\n",
       "      <td>0.395952</td>\n",
       "      <td>0.991385</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>flight_duration</th>\n",
       "      <td>-0.510324</td>\n",
       "      <td>0.489426</td>\n",
       "      <td>0.395952</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.994118</td>\n",
       "      <td>0.272263</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fuel_expense</th>\n",
       "      <td>-0.587605</td>\n",
       "      <td>0.489426</td>\n",
       "      <td>0.395952</td>\n",
       "      <td>0.994118</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.272263</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>profit_total</th>\n",
       "      <td>-0.242566</td>\n",
       "      <td>-0.084783</td>\n",
       "      <td>0.991385</td>\n",
       "      <td>0.272263</td>\n",
       "      <td>0.272263</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                   flight_id  tickets_cost  total_ticket_sale  \\\n",
       "flight_id           1.000000     -0.440494          -0.354002   \n",
       "tickets_cost       -0.440494      1.000000          -0.014287   \n",
       "total_ticket_sale  -0.354002     -0.014287           1.000000   \n",
       "flight_duration    -0.510324      0.489426           0.395952   \n",
       "fuel_expense       -0.587605      0.489426           0.395952   \n",
       "profit_total       -0.242566     -0.084783           0.991385   \n",
       "\n",
       "                   flight_duration  fuel_expense  profit_total  \n",
       "flight_id                -0.510324     -0.587605     -0.242566  \n",
       "tickets_cost              0.489426      0.489426     -0.084783  \n",
       "total_ticket_sale         0.395952      0.395952      0.991385  \n",
       "flight_duration           1.000000      0.994118      0.272263  \n",
       "fuel_expense              0.994118      1.000000      0.272263  \n",
       "profit_total              0.272263      0.272263      1.000000  "
      ]
     },
     "execution_count": 321,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "avia_df.corr()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 322,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Найдены статистически значимые различия для колонки tickets_cost\n",
      "Найдены статистически значимые различия для колонки total_ticket_sale\n",
      "Найдены статистически значимые различия для колонки flight_duration\n",
      "Найдены статистически значимые различия для колонки fuel_expense\n",
      "Найдены статистически значимые различия для колонки profit_total\n"
     ]
    }
   ],
   "source": [
    "# Проверим, есть ли статистическая разница в распределении оценок по номинативным признакам, с помощью теста Стьюдента.\n",
    "def get_stat_dif(column):\n",
    "    cols = avia_df.loc[:, column].value_counts().index[:10]\n",
    "    combinations_all = list(combinations(cols, 2))\n",
    "    for comb in combinations_all:\n",
    "        if ttest_ind(avia_df.loc[avia_df.loc[:, column] == comb[0], 'profit_total'],\n",
    "                     avia_df.loc[avia_df.loc[:, column] == comb[1], 'profit_total']).pvalue \\\n",
    "                <= 0.05/len(combinations_all):  # Учли поправку Бонферони\n",
    "            print('Найдены статистически значимые различия для колонки', column)\n",
    "            break\n",
    "\n",
    "\n",
    "for col in avia_df:\n",
    "    get_stat_dif(col)\n",
    "# честно говоря я не знаю что с этим делать..."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 323,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 792x648 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Для быстрого построения графиков зависимости переменных можно воспользоваться функцией pairplot из модуля seaborn:\n",
    "\n",
    "fig, ax = plt.subplots(figsize=(11, 9))\n",
    "sns.heatmap(avia_df)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 325,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# посмотрим на прибль по городам\n",
    "for x in (avia['city'].value_counts()).index:\n",
    "    avia['profit_total'][avia['city'] == x].hist(bins=100)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 327,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# сравним с убытками по городам\n",
    "for x in (avia_fail['city'].value_counts()).index:\n",
    "    avia_fail['profit_total'][avia_fail['city'] == x].hist(bins=100)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 329,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1201000.0"
      ]
     },
     "execution_count": 329,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Видно, что есть убыточные рейсы и прибыльные, посмотрим на них\n",
    "avia['profit_total'].max()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 330,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "-138600.0"
      ]
     },
     "execution_count": 330,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "avia['profit_total'].min()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 331,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>flight_id</th>\n",
       "      <th>airport_departure</th>\n",
       "      <th>airport_arrival</th>\n",
       "      <th>city</th>\n",
       "      <th>plane_model</th>\n",
       "      <th>time_departure</th>\n",
       "      <th>time_arrival</th>\n",
       "      <th>tickets_cost</th>\n",
       "      <th>total_ticket_sale</th>\n",
       "      <th>flight_duration</th>\n",
       "      <th>fuel_expense</th>\n",
       "      <th>profit_total</th>\n",
       "      <th>day_of_week_departure</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>136226</td>\n",
       "      <td>AAQ</td>\n",
       "      <td>SVO</td>\n",
       "      <td>Moscow</td>\n",
       "      <td>Boeing 737-300</td>\n",
       "      <td>2017-01-30 10:05:00+00:00</td>\n",
       "      <td>2017-01-30T11:45:00Z</td>\n",
       "      <td>12200.0</td>\n",
       "      <td>1366400.0</td>\n",
       "      <td>1.666667</td>\n",
       "      <td>165400.0</td>\n",
       "      <td>1201000.0</td>\n",
       "      <td>Monday</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32</th>\n",
       "      <td>136316</td>\n",
       "      <td>AAQ</td>\n",
       "      <td>SVO</td>\n",
       "      <td>Moscow</td>\n",
       "      <td>Boeing 737-300</td>\n",
       "      <td>2017-01-12 10:05:00+00:00</td>\n",
       "      <td>2017-01-12T11:45:00Z</td>\n",
       "      <td>12200.0</td>\n",
       "      <td>1366400.0</td>\n",
       "      <td>1.666667</td>\n",
       "      <td>165400.0</td>\n",
       "      <td>1201000.0</td>\n",
       "      <td>Thursday</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>46</th>\n",
       "      <td>136423</td>\n",
       "      <td>AAQ</td>\n",
       "      <td>SVO</td>\n",
       "      <td>Moscow</td>\n",
       "      <td>Boeing 737-300</td>\n",
       "      <td>2017-01-10 10:05:00+00:00</td>\n",
       "      <td>2017-01-10T11:45:00Z</td>\n",
       "      <td>12200.0</td>\n",
       "      <td>1366400.0</td>\n",
       "      <td>1.666667</td>\n",
       "      <td>165400.0</td>\n",
       "      <td>1201000.0</td>\n",
       "      <td>Tuesday</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    flight_id airport_departure airport_arrival    city     plane_model  \\\n",
       "19     136226               AAQ             SVO  Moscow  Boeing 737-300   \n",
       "32     136316               AAQ             SVO  Moscow  Boeing 737-300   \n",
       "46     136423               AAQ             SVO  Moscow  Boeing 737-300   \n",
       "\n",
       "              time_departure          time_arrival  tickets_cost  \\\n",
       "19 2017-01-30 10:05:00+00:00  2017-01-30T11:45:00Z       12200.0   \n",
       "32 2017-01-12 10:05:00+00:00  2017-01-12T11:45:00Z       12200.0   \n",
       "46 2017-01-10 10:05:00+00:00  2017-01-10T11:45:00Z       12200.0   \n",
       "\n",
       "    total_ticket_sale  flight_duration  fuel_expense  profit_total  \\\n",
       "19          1366400.0         1.666667      165400.0     1201000.0   \n",
       "32          1366400.0         1.666667      165400.0     1201000.0   \n",
       "46          1366400.0         1.666667      165400.0     1201000.0   \n",
       "\n",
       "   day_of_week_departure  \n",
       "19                Monday  \n",
       "32              Thursday  \n",
       "46               Tuesday  "
      ]
     },
     "execution_count": 331,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "avia.loc[avia['profit_total'] == 1201000.0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 332,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>flight_id</th>\n",
       "      <th>airport_departure</th>\n",
       "      <th>airport_arrival</th>\n",
       "      <th>city</th>\n",
       "      <th>plane_model</th>\n",
       "      <th>time_departure</th>\n",
       "      <th>time_arrival</th>\n",
       "      <th>tickets_cost</th>\n",
       "      <th>total_ticket_sale</th>\n",
       "      <th>flight_duration</th>\n",
       "      <th>fuel_expense</th>\n",
       "      <th>profit_total</th>\n",
       "      <th>day_of_week_departure</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>98</th>\n",
       "      <td>136366</td>\n",
       "      <td>AAQ</td>\n",
       "      <td>SVO</td>\n",
       "      <td>Moscow</td>\n",
       "      <td>Boeing 737-300</td>\n",
       "      <td>2017-01-11 10:05:00+00:00</td>\n",
       "      <td>2017-01-11T11:45:00Z</td>\n",
       "      <td>13400.0</td>\n",
       "      <td>26800.0</td>\n",
       "      <td>1.666667</td>\n",
       "      <td>165400.0</td>\n",
       "      <td>-138600.0</td>\n",
       "      <td>Wednesday</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    flight_id airport_departure airport_arrival    city     plane_model  \\\n",
       "98     136366               AAQ             SVO  Moscow  Boeing 737-300   \n",
       "\n",
       "              time_departure          time_arrival  tickets_cost  \\\n",
       "98 2017-01-11 10:05:00+00:00  2017-01-11T11:45:00Z       13400.0   \n",
       "\n",
       "    total_ticket_sale  flight_duration  fuel_expense  profit_total  \\\n",
       "98            26800.0         1.666667      165400.0     -138600.0   \n",
       "\n",
       "   day_of_week_departure  \n",
       "98             Wednesday  "
      ]
     },
     "execution_count": 332,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "avia.loc[avia['profit_total'] == -138600.0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
